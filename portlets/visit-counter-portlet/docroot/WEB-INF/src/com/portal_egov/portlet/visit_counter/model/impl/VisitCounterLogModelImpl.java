/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.visit_counter.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.portal_egov.portlet.visit_counter.model.VisitCounterLog;
import com.portal_egov.portlet.visit_counter.model.VisitCounterLogModel;
import com.portal_egov.portlet.visit_counter.model.VisitCounterLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VisitCounterLog service. Represents a row in the &quot;VisitCounterLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.visit_counter.model.VisitCounterLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VisitCounterLogImpl}.
 * </p>
 *
 * @author HungDX
 * @see VisitCounterLogImpl
 * @see com.portal_egov.portlet.visit_counter.model.VisitCounterLog
 * @see com.portal_egov.portlet.visit_counter.model.VisitCounterLogModel
 * @generated
 */
@JSON(strict = true)
public class VisitCounterLogModelImpl extends BaseModelImpl<VisitCounterLog>
	implements VisitCounterLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a visit counter log model instance should use the {@link com.portal_egov.portlet.visit_counter.model.VisitCounterLog} interface instead.
	 */
	public static final String TABLE_NAME = "VisitCounterLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "visitorIp", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "hitCounter", Types.INTEGER },
			{ "lastAccessPageId", Types.BIGINT },
			{ "lastAccessDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table VisitCounterLog (visitorIp VARCHAR(75) not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,hitCounter INTEGER,lastAccessPageId LONG,lastAccessDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table VisitCounterLog";
	public static final String ORDER_BY_JPQL = " ORDER BY visitCounterLog.hitCounter DESC";
	public static final String ORDER_BY_SQL = " ORDER BY VisitCounterLog.hitCounter DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.visit_counter.model.VisitCounterLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.visit_counter.model.VisitCounterLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.visit_counter.model.VisitCounterLog"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VisitCounterLog toModel(VisitCounterLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VisitCounterLog model = new VisitCounterLogImpl();

		model.setVisitorIp(soapModel.getVisitorIp());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setHitCounter(soapModel.getHitCounter());
		model.setLastAccessPageId(soapModel.getLastAccessPageId());
		model.setLastAccessDate(soapModel.getLastAccessDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VisitCounterLog> toModels(
		VisitCounterLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VisitCounterLog> models = new ArrayList<VisitCounterLog>(soapModels.length);

		for (VisitCounterLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.visit_counter.model.VisitCounterLog"));

	public VisitCounterLogModelImpl() {
	}

	public String getPrimaryKey() {
		return _visitorIp;
	}

	public void setPrimaryKey(String primaryKey) {
		setVisitorIp(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return _visitorIp;
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return VisitCounterLog.class;
	}

	public String getModelClassName() {
		return VisitCounterLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("visitorIp", getVisitorIp());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("hitCounter", getHitCounter());
		attributes.put("lastAccessPageId", getLastAccessPageId());
		attributes.put("lastAccessDate", getLastAccessDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String visitorIp = (String)attributes.get("visitorIp");

		if (visitorIp != null) {
			setVisitorIp(visitorIp);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer hitCounter = (Integer)attributes.get("hitCounter");

		if (hitCounter != null) {
			setHitCounter(hitCounter);
		}

		Long lastAccessPageId = (Long)attributes.get("lastAccessPageId");

		if (lastAccessPageId != null) {
			setLastAccessPageId(lastAccessPageId);
		}

		Date lastAccessDate = (Date)attributes.get("lastAccessDate");

		if (lastAccessDate != null) {
			setLastAccessDate(lastAccessDate);
		}
	}

	@JSON
	public String getVisitorIp() {
		if (_visitorIp == null) {
			return StringPool.BLANK;
		}
		else {
			return _visitorIp;
		}
	}

	public void setVisitorIp(String visitorIp) {
		_visitorIp = visitorIp;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public int getHitCounter() {
		return _hitCounter;
	}

	public void setHitCounter(int hitCounter) {
		_columnBitmask = -1L;

		_hitCounter = hitCounter;
	}

	@JSON
	public long getLastAccessPageId() {
		return _lastAccessPageId;
	}

	public void setLastAccessPageId(long lastAccessPageId) {
		_lastAccessPageId = lastAccessPageId;
	}

	@JSON
	public Date getLastAccessDate() {
		return _lastAccessDate;
	}

	public void setLastAccessDate(Date lastAccessDate) {
		_lastAccessDate = lastAccessDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public VisitCounterLog toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (VisitCounterLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		VisitCounterLogImpl visitCounterLogImpl = new VisitCounterLogImpl();

		visitCounterLogImpl.setVisitorIp(getVisitorIp());
		visitCounterLogImpl.setCompanyId(getCompanyId());
		visitCounterLogImpl.setGroupId(getGroupId());
		visitCounterLogImpl.setUserId(getUserId());
		visitCounterLogImpl.setUserName(getUserName());
		visitCounterLogImpl.setCreateDate(getCreateDate());
		visitCounterLogImpl.setModifiedDate(getModifiedDate());
		visitCounterLogImpl.setHitCounter(getHitCounter());
		visitCounterLogImpl.setLastAccessPageId(getLastAccessPageId());
		visitCounterLogImpl.setLastAccessDate(getLastAccessDate());

		visitCounterLogImpl.resetOriginalValues();

		return visitCounterLogImpl;
	}

	public int compareTo(VisitCounterLog visitCounterLog) {
		int value = 0;

		if (getHitCounter() < visitCounterLog.getHitCounter()) {
			value = -1;
		}
		else if (getHitCounter() > visitCounterLog.getHitCounter()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		VisitCounterLog visitCounterLog = null;

		try {
			visitCounterLog = (VisitCounterLog)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String primaryKey = visitCounterLog.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		VisitCounterLogModelImpl visitCounterLogModelImpl = this;

		visitCounterLogModelImpl._originalCompanyId = visitCounterLogModelImpl._companyId;

		visitCounterLogModelImpl._setOriginalCompanyId = false;

		visitCounterLogModelImpl._originalGroupId = visitCounterLogModelImpl._groupId;

		visitCounterLogModelImpl._setOriginalGroupId = false;

		visitCounterLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VisitCounterLog> toCacheModel() {
		VisitCounterLogCacheModel visitCounterLogCacheModel = new VisitCounterLogCacheModel();

		visitCounterLogCacheModel.visitorIp = getVisitorIp();

		String visitorIp = visitCounterLogCacheModel.visitorIp;

		if ((visitorIp != null) && (visitorIp.length() == 0)) {
			visitCounterLogCacheModel.visitorIp = null;
		}

		visitCounterLogCacheModel.companyId = getCompanyId();

		visitCounterLogCacheModel.groupId = getGroupId();

		visitCounterLogCacheModel.userId = getUserId();

		visitCounterLogCacheModel.userName = getUserName();

		String userName = visitCounterLogCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			visitCounterLogCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			visitCounterLogCacheModel.createDate = createDate.getTime();
		}
		else {
			visitCounterLogCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			visitCounterLogCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			visitCounterLogCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		visitCounterLogCacheModel.hitCounter = getHitCounter();

		visitCounterLogCacheModel.lastAccessPageId = getLastAccessPageId();

		Date lastAccessDate = getLastAccessDate();

		if (lastAccessDate != null) {
			visitCounterLogCacheModel.lastAccessDate = lastAccessDate.getTime();
		}
		else {
			visitCounterLogCacheModel.lastAccessDate = Long.MIN_VALUE;
		}

		return visitCounterLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{visitorIp=");
		sb.append(getVisitorIp());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", hitCounter=");
		sb.append(getHitCounter());
		sb.append(", lastAccessPageId=");
		sb.append(getLastAccessPageId());
		sb.append(", lastAccessDate=");
		sb.append(getLastAccessDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.portal_egov.portlet.visit_counter.model.VisitCounterLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>visitorIp</column-name><column-value><![CDATA[");
		sb.append(getVisitorIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hitCounter</column-name><column-value><![CDATA[");
		sb.append(getHitCounter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastAccessPageId</column-name><column-value><![CDATA[");
		sb.append(getLastAccessPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastAccessDate</column-name><column-value><![CDATA[");
		sb.append(getLastAccessDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VisitCounterLog.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			VisitCounterLog.class
		};
	private String _visitorIp;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _hitCounter;
	private long _lastAccessPageId;
	private Date _lastAccessDate;
	private long _columnBitmask;
	private VisitCounterLog _escapedModelProxy;
}