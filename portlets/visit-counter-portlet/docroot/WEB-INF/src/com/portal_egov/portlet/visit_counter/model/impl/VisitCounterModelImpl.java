/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.visit_counter.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.visit_counter.model.VisitCounter;
import com.portal_egov.portlet.visit_counter.model.VisitCounterModel;
import com.portal_egov.portlet.visit_counter.model.VisitCounterSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VisitCounter service. Represents a row in the &quot;VisitCounter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.visit_counter.model.VisitCounterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VisitCounterImpl}.
 * </p>
 *
 * @author HungDX
 * @see VisitCounterImpl
 * @see com.portal_egov.portlet.visit_counter.model.VisitCounter
 * @see com.portal_egov.portlet.visit_counter.model.VisitCounterModel
 * @generated
 */
@JSON(strict = true)
public class VisitCounterModelImpl extends BaseModelImpl<VisitCounter>
	implements VisitCounterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a visit counter model instance should use the {@link com.portal_egov.portlet.visit_counter.model.VisitCounter} interface instead.
	 */
	public static final String TABLE_NAME = "VisitCounter";
	public static final Object[][] TABLE_COLUMNS = {
			{ "counterId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "totalHitCounter", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table VisitCounter (counterId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,totalHitCounter INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table VisitCounter";
	public static final String ORDER_BY_JPQL = " ORDER BY visitCounter.totalHitCounter DESC";
	public static final String ORDER_BY_SQL = " ORDER BY VisitCounter.totalHitCounter DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.visit_counter.model.VisitCounter"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.visit_counter.model.VisitCounter"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.visit_counter.model.VisitCounter"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VisitCounter toModel(VisitCounterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VisitCounter model = new VisitCounterImpl();

		model.setCounterId(soapModel.getCounterId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTotalHitCounter(soapModel.getTotalHitCounter());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VisitCounter> toModels(VisitCounterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VisitCounter> models = new ArrayList<VisitCounter>(soapModels.length);

		for (VisitCounterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.visit_counter.model.VisitCounter"));

	public VisitCounterModelImpl() {
	}

	public long getPrimaryKey() {
		return _counterId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCounterId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_counterId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return VisitCounter.class;
	}

	public String getModelClassName() {
		return VisitCounter.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("counterId", getCounterId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("totalHitCounter", getTotalHitCounter());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long counterId = (Long)attributes.get("counterId");

		if (counterId != null) {
			setCounterId(counterId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer totalHitCounter = (Integer)attributes.get("totalHitCounter");

		if (totalHitCounter != null) {
			setTotalHitCounter(totalHitCounter);
		}
	}

	@JSON
	public long getCounterId() {
		return _counterId;
	}

	public void setCounterId(long counterId) {
		_counterId = counterId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public int getTotalHitCounter() {
		return _totalHitCounter;
	}

	public void setTotalHitCounter(int totalHitCounter) {
		_columnBitmask = -1L;

		_totalHitCounter = totalHitCounter;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			VisitCounter.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VisitCounter toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (VisitCounter)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		VisitCounterImpl visitCounterImpl = new VisitCounterImpl();

		visitCounterImpl.setCounterId(getCounterId());
		visitCounterImpl.setCompanyId(getCompanyId());
		visitCounterImpl.setGroupId(getGroupId());
		visitCounterImpl.setUserId(getUserId());
		visitCounterImpl.setUserName(getUserName());
		visitCounterImpl.setCreateDate(getCreateDate());
		visitCounterImpl.setModifiedDate(getModifiedDate());
		visitCounterImpl.setTotalHitCounter(getTotalHitCounter());

		visitCounterImpl.resetOriginalValues();

		return visitCounterImpl;
	}

	public int compareTo(VisitCounter visitCounter) {
		int value = 0;

		if (getTotalHitCounter() < visitCounter.getTotalHitCounter()) {
			value = -1;
		}
		else if (getTotalHitCounter() > visitCounter.getTotalHitCounter()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		VisitCounter visitCounter = null;

		try {
			visitCounter = (VisitCounter)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = visitCounter.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VisitCounterModelImpl visitCounterModelImpl = this;

		visitCounterModelImpl._originalCompanyId = visitCounterModelImpl._companyId;

		visitCounterModelImpl._setOriginalCompanyId = false;

		visitCounterModelImpl._originalGroupId = visitCounterModelImpl._groupId;

		visitCounterModelImpl._setOriginalGroupId = false;

		visitCounterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VisitCounter> toCacheModel() {
		VisitCounterCacheModel visitCounterCacheModel = new VisitCounterCacheModel();

		visitCounterCacheModel.counterId = getCounterId();

		visitCounterCacheModel.companyId = getCompanyId();

		visitCounterCacheModel.groupId = getGroupId();

		visitCounterCacheModel.userId = getUserId();

		visitCounterCacheModel.userName = getUserName();

		String userName = visitCounterCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			visitCounterCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			visitCounterCacheModel.createDate = createDate.getTime();
		}
		else {
			visitCounterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			visitCounterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			visitCounterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		visitCounterCacheModel.totalHitCounter = getTotalHitCounter();

		return visitCounterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{counterId=");
		sb.append(getCounterId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", totalHitCounter=");
		sb.append(getTotalHitCounter());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.portal_egov.portlet.visit_counter.model.VisitCounter");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>counterId</column-name><column-value><![CDATA[");
		sb.append(getCounterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalHitCounter</column-name><column-value><![CDATA[");
		sb.append(getTotalHitCounter());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VisitCounter.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			VisitCounter.class
		};
	private long _counterId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _totalHitCounter;
	private long _columnBitmask;
	private VisitCounter _escapedModelProxy;
}