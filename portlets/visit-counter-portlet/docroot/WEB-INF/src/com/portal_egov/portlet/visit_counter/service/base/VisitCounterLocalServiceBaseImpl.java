/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.visit_counter.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.portal_egov.portlet.visit_counter.model.VisitCounter;
import com.portal_egov.portlet.visit_counter.service.VisitCounterDayLogLocalService;
import com.portal_egov.portlet.visit_counter.service.VisitCounterDayLogService;
import com.portal_egov.portlet.visit_counter.service.VisitCounterLocalService;
import com.portal_egov.portlet.visit_counter.service.VisitCounterLogLocalService;
import com.portal_egov.portlet.visit_counter.service.VisitCounterLogService;
import com.portal_egov.portlet.visit_counter.service.VisitCounterService;
import com.portal_egov.portlet.visit_counter.service.persistence.VisitCounterDayLogPersistence;
import com.portal_egov.portlet.visit_counter.service.persistence.VisitCounterLogPersistence;
import com.portal_egov.portlet.visit_counter.service.persistence.VisitCounterPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the visit counter local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.portal_egov.portlet.visit_counter.service.impl.VisitCounterLocalServiceImpl}.
 * </p>
 *
 * @author HungDX
 * @see com.portal_egov.portlet.visit_counter.service.impl.VisitCounterLocalServiceImpl
 * @see com.portal_egov.portlet.visit_counter.service.VisitCounterLocalServiceUtil
 * @generated
 */
public abstract class VisitCounterLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements VisitCounterLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.portal_egov.portlet.visit_counter.service.VisitCounterLocalServiceUtil} to access the visit counter local service.
	 */

	/**
	 * Adds the visit counter to the database. Also notifies the appropriate model listeners.
	 *
	 * @param visitCounter the visit counter
	 * @return the visit counter that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public VisitCounter addVisitCounter(VisitCounter visitCounter)
		throws SystemException {
		visitCounter.setNew(true);

		return visitCounterPersistence.update(visitCounter, false);
	}

	/**
	 * Creates a new visit counter with the primary key. Does not add the visit counter to the database.
	 *
	 * @param counterId the primary key for the new visit counter
	 * @return the new visit counter
	 */
	public VisitCounter createVisitCounter(long counterId) {
		return visitCounterPersistence.create(counterId);
	}

	/**
	 * Deletes the visit counter with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param counterId the primary key of the visit counter
	 * @return the visit counter that was removed
	 * @throws PortalException if a visit counter with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public VisitCounter deleteVisitCounter(long counterId)
		throws PortalException, SystemException {
		return visitCounterPersistence.remove(counterId);
	}

	/**
	 * Deletes the visit counter from the database. Also notifies the appropriate model listeners.
	 *
	 * @param visitCounter the visit counter
	 * @return the visit counter that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public VisitCounter deleteVisitCounter(VisitCounter visitCounter)
		throws SystemException {
		return visitCounterPersistence.remove(visitCounter);
	}

	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(VisitCounter.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return visitCounterPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return visitCounterPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return visitCounterPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return visitCounterPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public VisitCounter fetchVisitCounter(long counterId)
		throws SystemException {
		return visitCounterPersistence.fetchByPrimaryKey(counterId);
	}

	/**
	 * Returns the visit counter with the primary key.
	 *
	 * @param counterId the primary key of the visit counter
	 * @return the visit counter
	 * @throws PortalException if a visit counter with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public VisitCounter getVisitCounter(long counterId)
		throws PortalException, SystemException {
		return visitCounterPersistence.findByPrimaryKey(counterId);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return visitCounterPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the visit counters.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of visit counters
	 * @param end the upper bound of the range of visit counters (not inclusive)
	 * @return the range of visit counters
	 * @throws SystemException if a system exception occurred
	 */
	public List<VisitCounter> getVisitCounters(int start, int end)
		throws SystemException {
		return visitCounterPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of visit counters.
	 *
	 * @return the number of visit counters
	 * @throws SystemException if a system exception occurred
	 */
	public int getVisitCountersCount() throws SystemException {
		return visitCounterPersistence.countAll();
	}

	/**
	 * Updates the visit counter in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param visitCounter the visit counter
	 * @return the visit counter that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public VisitCounter updateVisitCounter(VisitCounter visitCounter)
		throws SystemException {
		return updateVisitCounter(visitCounter, true);
	}

	/**
	 * Updates the visit counter in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param visitCounter the visit counter
	 * @param merge whether to merge the visit counter with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the visit counter that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public VisitCounter updateVisitCounter(VisitCounter visitCounter,
		boolean merge) throws SystemException {
		visitCounter.setNew(false);

		return visitCounterPersistence.update(visitCounter, merge);
	}

	/**
	 * Returns the visit counter local service.
	 *
	 * @return the visit counter local service
	 */
	public VisitCounterLocalService getVisitCounterLocalService() {
		return visitCounterLocalService;
	}

	/**
	 * Sets the visit counter local service.
	 *
	 * @param visitCounterLocalService the visit counter local service
	 */
	public void setVisitCounterLocalService(
		VisitCounterLocalService visitCounterLocalService) {
		this.visitCounterLocalService = visitCounterLocalService;
	}

	/**
	 * Returns the visit counter remote service.
	 *
	 * @return the visit counter remote service
	 */
	public VisitCounterService getVisitCounterService() {
		return visitCounterService;
	}

	/**
	 * Sets the visit counter remote service.
	 *
	 * @param visitCounterService the visit counter remote service
	 */
	public void setVisitCounterService(VisitCounterService visitCounterService) {
		this.visitCounterService = visitCounterService;
	}

	/**
	 * Returns the visit counter persistence.
	 *
	 * @return the visit counter persistence
	 */
	public VisitCounterPersistence getVisitCounterPersistence() {
		return visitCounterPersistence;
	}

	/**
	 * Sets the visit counter persistence.
	 *
	 * @param visitCounterPersistence the visit counter persistence
	 */
	public void setVisitCounterPersistence(
		VisitCounterPersistence visitCounterPersistence) {
		this.visitCounterPersistence = visitCounterPersistence;
	}

	/**
	 * Returns the visit counter day log local service.
	 *
	 * @return the visit counter day log local service
	 */
	public VisitCounterDayLogLocalService getVisitCounterDayLogLocalService() {
		return visitCounterDayLogLocalService;
	}

	/**
	 * Sets the visit counter day log local service.
	 *
	 * @param visitCounterDayLogLocalService the visit counter day log local service
	 */
	public void setVisitCounterDayLogLocalService(
		VisitCounterDayLogLocalService visitCounterDayLogLocalService) {
		this.visitCounterDayLogLocalService = visitCounterDayLogLocalService;
	}

	/**
	 * Returns the visit counter day log remote service.
	 *
	 * @return the visit counter day log remote service
	 */
	public VisitCounterDayLogService getVisitCounterDayLogService() {
		return visitCounterDayLogService;
	}

	/**
	 * Sets the visit counter day log remote service.
	 *
	 * @param visitCounterDayLogService the visit counter day log remote service
	 */
	public void setVisitCounterDayLogService(
		VisitCounterDayLogService visitCounterDayLogService) {
		this.visitCounterDayLogService = visitCounterDayLogService;
	}

	/**
	 * Returns the visit counter day log persistence.
	 *
	 * @return the visit counter day log persistence
	 */
	public VisitCounterDayLogPersistence getVisitCounterDayLogPersistence() {
		return visitCounterDayLogPersistence;
	}

	/**
	 * Sets the visit counter day log persistence.
	 *
	 * @param visitCounterDayLogPersistence the visit counter day log persistence
	 */
	public void setVisitCounterDayLogPersistence(
		VisitCounterDayLogPersistence visitCounterDayLogPersistence) {
		this.visitCounterDayLogPersistence = visitCounterDayLogPersistence;
	}

	/**
	 * Returns the visit counter log local service.
	 *
	 * @return the visit counter log local service
	 */
	public VisitCounterLogLocalService getVisitCounterLogLocalService() {
		return visitCounterLogLocalService;
	}

	/**
	 * Sets the visit counter log local service.
	 *
	 * @param visitCounterLogLocalService the visit counter log local service
	 */
	public void setVisitCounterLogLocalService(
		VisitCounterLogLocalService visitCounterLogLocalService) {
		this.visitCounterLogLocalService = visitCounterLogLocalService;
	}

	/**
	 * Returns the visit counter log remote service.
	 *
	 * @return the visit counter log remote service
	 */
	public VisitCounterLogService getVisitCounterLogService() {
		return visitCounterLogService;
	}

	/**
	 * Sets the visit counter log remote service.
	 *
	 * @param visitCounterLogService the visit counter log remote service
	 */
	public void setVisitCounterLogService(
		VisitCounterLogService visitCounterLogService) {
		this.visitCounterLogService = visitCounterLogService;
	}

	/**
	 * Returns the visit counter log persistence.
	 *
	 * @return the visit counter log persistence
	 */
	public VisitCounterLogPersistence getVisitCounterLogPersistence() {
		return visitCounterLogPersistence;
	}

	/**
	 * Sets the visit counter log persistence.
	 *
	 * @param visitCounterLogPersistence the visit counter log persistence
	 */
	public void setVisitCounterLogPersistence(
		VisitCounterLogPersistence visitCounterLogPersistence) {
		this.visitCounterLogPersistence = visitCounterLogPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		PersistedModelLocalServiceRegistryUtil.register("com.portal_egov.portlet.visit_counter.model.VisitCounter",
			visitCounterLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.portal_egov.portlet.visit_counter.model.VisitCounter");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
	}

	protected Class<?> getModelClass() {
		return VisitCounter.class;
	}

	protected String getModelClassName() {
		return VisitCounter.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = visitCounterPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = VisitCounterLocalService.class)
	protected VisitCounterLocalService visitCounterLocalService;
	@BeanReference(type = VisitCounterService.class)
	protected VisitCounterService visitCounterService;
	@BeanReference(type = VisitCounterPersistence.class)
	protected VisitCounterPersistence visitCounterPersistence;
	@BeanReference(type = VisitCounterDayLogLocalService.class)
	protected VisitCounterDayLogLocalService visitCounterDayLogLocalService;
	@BeanReference(type = VisitCounterDayLogService.class)
	protected VisitCounterDayLogService visitCounterDayLogService;
	@BeanReference(type = VisitCounterDayLogPersistence.class)
	protected VisitCounterDayLogPersistence visitCounterDayLogPersistence;
	@BeanReference(type = VisitCounterLogLocalService.class)
	protected VisitCounterLogLocalService visitCounterLogLocalService;
	@BeanReference(type = VisitCounterLogService.class)
	protected VisitCounterLogService visitCounterLogService;
	@BeanReference(type = VisitCounterLogPersistence.class)
	protected VisitCounterLogPersistence visitCounterLogPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private VisitCounterLocalServiceClpInvoker _clpInvoker = new VisitCounterLocalServiceClpInvoker();
}