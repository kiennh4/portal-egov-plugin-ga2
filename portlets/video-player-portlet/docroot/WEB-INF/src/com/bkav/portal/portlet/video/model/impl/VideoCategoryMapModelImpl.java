/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bkav.portal.portlet.video.model.impl;

import com.bkav.portal.portlet.video.model.VideoCategoryMap;
import com.bkav.portal.portlet.video.model.VideoCategoryMapModel;
import com.bkav.portal.portlet.video.model.VideoCategoryMapSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VideoCategoryMap service. Represents a row in the &quot;VideoCategoryMap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bkav.portal.portlet.video.model.VideoCategoryMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VideoCategoryMapImpl}.
 * </p>
 *
 * @author hungdx
 * @see VideoCategoryMapImpl
 * @see com.bkav.portal.portlet.video.model.VideoCategoryMap
 * @see com.bkav.portal.portlet.video.model.VideoCategoryMapModel
 * @generated
 */
@JSON(strict = true)
public class VideoCategoryMapModelImpl extends BaseModelImpl<VideoCategoryMap>
	implements VideoCategoryMapModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a video category map model instance should use the {@link com.bkav.portal.portlet.video.model.VideoCategoryMap} interface instead.
	 */
	public static final String TABLE_NAME = "VideoCategoryMap";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mapId", Types.BIGINT },
			{ "categoryId", Types.BIGINT },
			{ "entryId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table VideoCategoryMap (mapId LONG not null primary key,categoryId LONG,entryId LONG)";
	public static final String TABLE_SQL_DROP = "drop table VideoCategoryMap";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bkav.portal.portlet.video.model.VideoCategoryMap"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bkav.portal.portlet.video.model.VideoCategoryMap"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bkav.portal.portlet.video.model.VideoCategoryMap"),
			true);
	public static long CATEGORYID_COLUMN_BITMASK = 1L;
	public static long ENTRYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VideoCategoryMap toModel(VideoCategoryMapSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VideoCategoryMap model = new VideoCategoryMapImpl();

		model.setMapId(soapModel.getMapId());
		model.setCategoryId(soapModel.getCategoryId());
		model.setEntryId(soapModel.getEntryId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VideoCategoryMap> toModels(
		VideoCategoryMapSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VideoCategoryMap> models = new ArrayList<VideoCategoryMap>(soapModels.length);

		for (VideoCategoryMapSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bkav.portal.portlet.video.model.VideoCategoryMap"));

	public VideoCategoryMapModelImpl() {
	}

	public long getPrimaryKey() {
		return _mapId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMapId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_mapId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return VideoCategoryMap.class;
	}

	public String getModelClassName() {
		return VideoCategoryMap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mapId", getMapId());
		attributes.put("categoryId", getCategoryId());
		attributes.put("entryId", getEntryId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long mapId = (Long)attributes.get("mapId");

		if (mapId != null) {
			setMapId(mapId);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Long entryId = (Long)attributes.get("entryId");

		if (entryId != null) {
			setEntryId(entryId);
		}
	}

	@JSON
	public long getMapId() {
		return _mapId;
	}

	public void setMapId(long mapId) {
		_mapId = mapId;
	}

	@JSON
	public long getCategoryId() {
		return _categoryId;
	}

	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@JSON
	public long getEntryId() {
		return _entryId;
	}

	public void setEntryId(long entryId) {
		_columnBitmask |= ENTRYID_COLUMN_BITMASK;

		if (!_setOriginalEntryId) {
			_setOriginalEntryId = true;

			_originalEntryId = _entryId;
		}

		_entryId = entryId;
	}

	public long getOriginalEntryId() {
		return _originalEntryId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VideoCategoryMap.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VideoCategoryMap toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (VideoCategoryMap)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		VideoCategoryMapImpl videoCategoryMapImpl = new VideoCategoryMapImpl();

		videoCategoryMapImpl.setMapId(getMapId());
		videoCategoryMapImpl.setCategoryId(getCategoryId());
		videoCategoryMapImpl.setEntryId(getEntryId());

		videoCategoryMapImpl.resetOriginalValues();

		return videoCategoryMapImpl;
	}

	public int compareTo(VideoCategoryMap videoCategoryMap) {
		long primaryKey = videoCategoryMap.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		VideoCategoryMap videoCategoryMap = null;

		try {
			videoCategoryMap = (VideoCategoryMap)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = videoCategoryMap.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VideoCategoryMapModelImpl videoCategoryMapModelImpl = this;

		videoCategoryMapModelImpl._originalCategoryId = videoCategoryMapModelImpl._categoryId;

		videoCategoryMapModelImpl._setOriginalCategoryId = false;

		videoCategoryMapModelImpl._originalEntryId = videoCategoryMapModelImpl._entryId;

		videoCategoryMapModelImpl._setOriginalEntryId = false;

		videoCategoryMapModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VideoCategoryMap> toCacheModel() {
		VideoCategoryMapCacheModel videoCategoryMapCacheModel = new VideoCategoryMapCacheModel();

		videoCategoryMapCacheModel.mapId = getMapId();

		videoCategoryMapCacheModel.categoryId = getCategoryId();

		videoCategoryMapCacheModel.entryId = getEntryId();

		return videoCategoryMapCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{mapId=");
		sb.append(getMapId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", entryId=");
		sb.append(getEntryId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.bkav.portal.portlet.video.model.VideoCategoryMap");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mapId</column-name><column-value><![CDATA[");
		sb.append(getMapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entryId</column-name><column-value><![CDATA[");
		sb.append(getEntryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VideoCategoryMap.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			VideoCategoryMap.class
		};
	private long _mapId;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private long _entryId;
	private long _originalEntryId;
	private boolean _setOriginalEntryId;
	private long _columnBitmask;
	private VideoCategoryMap _escapedModelProxy;
}