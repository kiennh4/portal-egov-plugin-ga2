/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bkav.portal.portlet.portalplugins.service.base;

import com.bkav.portal.portlet.portalplugins.model.ePortals;
import com.bkav.portal.portlet.portalplugins.service.PortalPluginsLocalService;
import com.bkav.portal.portlet.portalplugins.service.PortalPluginsService;
import com.bkav.portal.portlet.portalplugins.service.ePortalsLocalService;
import com.bkav.portal.portlet.portalplugins.service.ePortalsService;
import com.bkav.portal.portlet.portalplugins.service.persistence.PortalPluginsFinder;
import com.bkav.portal.portlet.portalplugins.service.persistence.PortalPluginsPersistence;
import com.bkav.portal.portlet.portalplugins.service.persistence.ePortalsFinder;
import com.bkav.portal.portlet.portalplugins.service.persistence.ePortalsPersistence;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import javax.sql.DataSource;

/**
 * The base implementation of the e portals remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.bkav.portal.portlet.portalplugins.service.impl.ePortalsServiceImpl}.
 * </p>
 *
 * @author AnhBDb
 * @see com.bkav.portal.portlet.portalplugins.service.impl.ePortalsServiceImpl
 * @see com.bkav.portal.portlet.portalplugins.service.ePortalsServiceUtil
 * @generated
 */
public abstract class ePortalsServiceBaseImpl extends BaseServiceImpl
	implements ePortalsService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.bkav.portal.portlet.portalplugins.service.ePortalsServiceUtil} to access the e portals remote service.
	 */

	/**
	 * Returns the e portals local service.
	 *
	 * @return the e portals local service
	 */
	public ePortalsLocalService getePortalsLocalService() {
		return ePortalsLocalService;
	}

	/**
	 * Sets the e portals local service.
	 *
	 * @param ePortalsLocalService the e portals local service
	 */
	public void setePortalsLocalService(
		ePortalsLocalService ePortalsLocalService) {
		this.ePortalsLocalService = ePortalsLocalService;
	}

	/**
	 * Returns the e portals remote service.
	 *
	 * @return the e portals remote service
	 */
	public ePortalsService getePortalsService() {
		return ePortalsService;
	}

	/**
	 * Sets the e portals remote service.
	 *
	 * @param ePortalsService the e portals remote service
	 */
	public void setePortalsService(ePortalsService ePortalsService) {
		this.ePortalsService = ePortalsService;
	}

	/**
	 * Returns the e portals persistence.
	 *
	 * @return the e portals persistence
	 */
	public ePortalsPersistence getePortalsPersistence() {
		return ePortalsPersistence;
	}

	/**
	 * Sets the e portals persistence.
	 *
	 * @param ePortalsPersistence the e portals persistence
	 */
	public void setePortalsPersistence(ePortalsPersistence ePortalsPersistence) {
		this.ePortalsPersistence = ePortalsPersistence;
	}

	/**
	 * Returns the e portals finder.
	 *
	 * @return the e portals finder
	 */
	public ePortalsFinder getePortalsFinder() {
		return ePortalsFinder;
	}

	/**
	 * Sets the e portals finder.
	 *
	 * @param ePortalsFinder the e portals finder
	 */
	public void setePortalsFinder(ePortalsFinder ePortalsFinder) {
		this.ePortalsFinder = ePortalsFinder;
	}

	/**
	 * Returns the portal plugins local service.
	 *
	 * @return the portal plugins local service
	 */
	public PortalPluginsLocalService getPortalPluginsLocalService() {
		return portalPluginsLocalService;
	}

	/**
	 * Sets the portal plugins local service.
	 *
	 * @param portalPluginsLocalService the portal plugins local service
	 */
	public void setPortalPluginsLocalService(
		PortalPluginsLocalService portalPluginsLocalService) {
		this.portalPluginsLocalService = portalPluginsLocalService;
	}

	/**
	 * Returns the portal plugins remote service.
	 *
	 * @return the portal plugins remote service
	 */
	public PortalPluginsService getPortalPluginsService() {
		return portalPluginsService;
	}

	/**
	 * Sets the portal plugins remote service.
	 *
	 * @param portalPluginsService the portal plugins remote service
	 */
	public void setPortalPluginsService(
		PortalPluginsService portalPluginsService) {
		this.portalPluginsService = portalPluginsService;
	}

	/**
	 * Returns the portal plugins persistence.
	 *
	 * @return the portal plugins persistence
	 */
	public PortalPluginsPersistence getPortalPluginsPersistence() {
		return portalPluginsPersistence;
	}

	/**
	 * Sets the portal plugins persistence.
	 *
	 * @param portalPluginsPersistence the portal plugins persistence
	 */
	public void setPortalPluginsPersistence(
		PortalPluginsPersistence portalPluginsPersistence) {
		this.portalPluginsPersistence = portalPluginsPersistence;
	}

	/**
	 * Returns the portal plugins finder.
	 *
	 * @return the portal plugins finder
	 */
	public PortalPluginsFinder getPortalPluginsFinder() {
		return portalPluginsFinder;
	}

	/**
	 * Sets the portal plugins finder.
	 *
	 * @param portalPluginsFinder the portal plugins finder
	 */
	public void setPortalPluginsFinder(PortalPluginsFinder portalPluginsFinder) {
		this.portalPluginsFinder = portalPluginsFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
	}

	protected Class<?> getModelClass() {
		return ePortals.class;
	}

	protected String getModelClassName() {
		return ePortals.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = ePortalsPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ePortalsLocalService.class)
	protected ePortalsLocalService ePortalsLocalService;
	@BeanReference(type = ePortalsService.class)
	protected ePortalsService ePortalsService;
	@BeanReference(type = ePortalsPersistence.class)
	protected ePortalsPersistence ePortalsPersistence;
	@BeanReference(type = ePortalsFinder.class)
	protected ePortalsFinder ePortalsFinder;
	@BeanReference(type = PortalPluginsLocalService.class)
	protected PortalPluginsLocalService portalPluginsLocalService;
	@BeanReference(type = PortalPluginsService.class)
	protected PortalPluginsService portalPluginsService;
	@BeanReference(type = PortalPluginsPersistence.class)
	protected PortalPluginsPersistence portalPluginsPersistence;
	@BeanReference(type = PortalPluginsFinder.class)
	protected PortalPluginsFinder portalPluginsFinder;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ePortalsServiceClpInvoker _clpInvoker = new ePortalsServiceClpInvoker();
}