/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.tourism_map.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.tourism_map.model.TourismMapMarker;
import com.portal_egov.portlet.tourism_map.model.TourismMapMarkerModel;
import com.portal_egov.portlet.tourism_map.model.TourismMapMarkerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TourismMapMarker service. Represents a row in the &quot;TourismMapMarker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.tourism_map.model.TourismMapMarkerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismMapMarkerImpl}.
 * </p>
 *
 * @author HungDX
 * @see TourismMapMarkerImpl
 * @see com.portal_egov.portlet.tourism_map.model.TourismMapMarker
 * @see com.portal_egov.portlet.tourism_map.model.TourismMapMarkerModel
 * @generated
 */
@JSON(strict = true)
public class TourismMapMarkerModelImpl extends BaseModelImpl<TourismMapMarker>
	implements TourismMapMarkerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism map marker model instance should use the {@link com.portal_egov.portlet.tourism_map.model.TourismMapMarker} interface instead.
	 */
	public static final String TABLE_NAME = "TourismMapMarker";
	public static final Object[][] TABLE_COLUMNS = {
			{ "markerId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "markerGroupId", Types.BIGINT },
			{ "markerTitle", Types.VARCHAR },
			{ "markerInfo", Types.VARCHAR },
			{ "markerAddress", Types.VARCHAR },
			{ "markerImageId", Types.BIGINT },
			{ "markerLongitude", Types.VARCHAR },
			{ "markerLatitude", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TourismMapMarker (markerId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,markerGroupId LONG,markerTitle VARCHAR(300) null,markerInfo STRING null,markerAddress VARCHAR(1000) null,markerImageId LONG,markerLongitude VARCHAR(75) null,markerLatitude VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TourismMapMarker";
	public static final String ORDER_BY_JPQL = " ORDER BY tourismMapMarker.markerGroupId ASC, tourismMapMarker.markerTitle ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TourismMapMarker.markerGroupId ASC, TourismMapMarker.markerTitle ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.tourism_map.model.TourismMapMarker"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.tourism_map.model.TourismMapMarker"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.tourism_map.model.TourismMapMarker"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long MARKERGROUPID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TourismMapMarker toModel(TourismMapMarkerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TourismMapMarker model = new TourismMapMarkerImpl();

		model.setMarkerId(soapModel.getMarkerId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMarkerGroupId(soapModel.getMarkerGroupId());
		model.setMarkerTitle(soapModel.getMarkerTitle());
		model.setMarkerInfo(soapModel.getMarkerInfo());
		model.setMarkerAddress(soapModel.getMarkerAddress());
		model.setMarkerImageId(soapModel.getMarkerImageId());
		model.setMarkerLongitude(soapModel.getMarkerLongitude());
		model.setMarkerLatitude(soapModel.getMarkerLatitude());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TourismMapMarker> toModels(
		TourismMapMarkerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TourismMapMarker> models = new ArrayList<TourismMapMarker>(soapModels.length);

		for (TourismMapMarkerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.tourism_map.model.TourismMapMarker"));

	public TourismMapMarkerModelImpl() {
	}

	public long getPrimaryKey() {
		return _markerId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMarkerId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_markerId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TourismMapMarker.class;
	}

	public String getModelClassName() {
		return TourismMapMarker.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("markerId", getMarkerId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("markerGroupId", getMarkerGroupId());
		attributes.put("markerTitle", getMarkerTitle());
		attributes.put("markerInfo", getMarkerInfo());
		attributes.put("markerAddress", getMarkerAddress());
		attributes.put("markerImageId", getMarkerImageId());
		attributes.put("markerLongitude", getMarkerLongitude());
		attributes.put("markerLatitude", getMarkerLatitude());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long markerId = (Long)attributes.get("markerId");

		if (markerId != null) {
			setMarkerId(markerId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long markerGroupId = (Long)attributes.get("markerGroupId");

		if (markerGroupId != null) {
			setMarkerGroupId(markerGroupId);
		}

		String markerTitle = (String)attributes.get("markerTitle");

		if (markerTitle != null) {
			setMarkerTitle(markerTitle);
		}

		String markerInfo = (String)attributes.get("markerInfo");

		if (markerInfo != null) {
			setMarkerInfo(markerInfo);
		}

		String markerAddress = (String)attributes.get("markerAddress");

		if (markerAddress != null) {
			setMarkerAddress(markerAddress);
		}

		Long markerImageId = (Long)attributes.get("markerImageId");

		if (markerImageId != null) {
			setMarkerImageId(markerImageId);
		}

		String markerLongitude = (String)attributes.get("markerLongitude");

		if (markerLongitude != null) {
			setMarkerLongitude(markerLongitude);
		}

		String markerLatitude = (String)attributes.get("markerLatitude");

		if (markerLatitude != null) {
			setMarkerLatitude(markerLatitude);
		}
	}

	@JSON
	public long getMarkerId() {
		return _markerId;
	}

	public void setMarkerId(long markerId) {
		_markerId = markerId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getMarkerGroupId() {
		return _markerGroupId;
	}

	public void setMarkerGroupId(long markerGroupId) {
		_columnBitmask = -1L;

		if (!_setOriginalMarkerGroupId) {
			_setOriginalMarkerGroupId = true;

			_originalMarkerGroupId = _markerGroupId;
		}

		_markerGroupId = markerGroupId;
	}

	public long getOriginalMarkerGroupId() {
		return _originalMarkerGroupId;
	}

	@JSON
	public String getMarkerTitle() {
		if (_markerTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _markerTitle;
		}
	}

	public void setMarkerTitle(String markerTitle) {
		_columnBitmask = -1L;

		_markerTitle = markerTitle;
	}

	@JSON
	public String getMarkerInfo() {
		if (_markerInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _markerInfo;
		}
	}

	public void setMarkerInfo(String markerInfo) {
		_markerInfo = markerInfo;
	}

	@JSON
	public String getMarkerAddress() {
		if (_markerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _markerAddress;
		}
	}

	public void setMarkerAddress(String markerAddress) {
		_markerAddress = markerAddress;
	}

	@JSON
	public long getMarkerImageId() {
		return _markerImageId;
	}

	public void setMarkerImageId(long markerImageId) {
		_markerImageId = markerImageId;
	}

	@JSON
	public String getMarkerLongitude() {
		if (_markerLongitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _markerLongitude;
		}
	}

	public void setMarkerLongitude(String markerLongitude) {
		_markerLongitude = markerLongitude;
	}

	@JSON
	public String getMarkerLatitude() {
		if (_markerLatitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _markerLatitude;
		}
	}

	public void setMarkerLatitude(String markerLatitude) {
		_markerLatitude = markerLatitude;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TourismMapMarker.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismMapMarker toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TourismMapMarker)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TourismMapMarkerImpl tourismMapMarkerImpl = new TourismMapMarkerImpl();

		tourismMapMarkerImpl.setMarkerId(getMarkerId());
		tourismMapMarkerImpl.setCompanyId(getCompanyId());
		tourismMapMarkerImpl.setGroupId(getGroupId());
		tourismMapMarkerImpl.setUserId(getUserId());
		tourismMapMarkerImpl.setUserName(getUserName());
		tourismMapMarkerImpl.setCreateDate(getCreateDate());
		tourismMapMarkerImpl.setModifiedDate(getModifiedDate());
		tourismMapMarkerImpl.setMarkerGroupId(getMarkerGroupId());
		tourismMapMarkerImpl.setMarkerTitle(getMarkerTitle());
		tourismMapMarkerImpl.setMarkerInfo(getMarkerInfo());
		tourismMapMarkerImpl.setMarkerAddress(getMarkerAddress());
		tourismMapMarkerImpl.setMarkerImageId(getMarkerImageId());
		tourismMapMarkerImpl.setMarkerLongitude(getMarkerLongitude());
		tourismMapMarkerImpl.setMarkerLatitude(getMarkerLatitude());

		tourismMapMarkerImpl.resetOriginalValues();

		return tourismMapMarkerImpl;
	}

	public int compareTo(TourismMapMarker tourismMapMarker) {
		int value = 0;

		if (getMarkerGroupId() < tourismMapMarker.getMarkerGroupId()) {
			value = -1;
		}
		else if (getMarkerGroupId() > tourismMapMarker.getMarkerGroupId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getMarkerTitle().compareTo(tourismMapMarker.getMarkerTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TourismMapMarker tourismMapMarker = null;

		try {
			tourismMapMarker = (TourismMapMarker)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tourismMapMarker.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TourismMapMarkerModelImpl tourismMapMarkerModelImpl = this;

		tourismMapMarkerModelImpl._originalCompanyId = tourismMapMarkerModelImpl._companyId;

		tourismMapMarkerModelImpl._setOriginalCompanyId = false;

		tourismMapMarkerModelImpl._originalGroupId = tourismMapMarkerModelImpl._groupId;

		tourismMapMarkerModelImpl._setOriginalGroupId = false;

		tourismMapMarkerModelImpl._originalMarkerGroupId = tourismMapMarkerModelImpl._markerGroupId;

		tourismMapMarkerModelImpl._setOriginalMarkerGroupId = false;

		tourismMapMarkerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismMapMarker> toCacheModel() {
		TourismMapMarkerCacheModel tourismMapMarkerCacheModel = new TourismMapMarkerCacheModel();

		tourismMapMarkerCacheModel.markerId = getMarkerId();

		tourismMapMarkerCacheModel.companyId = getCompanyId();

		tourismMapMarkerCacheModel.groupId = getGroupId();

		tourismMapMarkerCacheModel.userId = getUserId();

		tourismMapMarkerCacheModel.userName = getUserName();

		String userName = tourismMapMarkerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismMapMarkerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismMapMarkerCacheModel.createDate = createDate.getTime();
		}
		else {
			tourismMapMarkerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismMapMarkerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tourismMapMarkerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tourismMapMarkerCacheModel.markerGroupId = getMarkerGroupId();

		tourismMapMarkerCacheModel.markerTitle = getMarkerTitle();

		String markerTitle = tourismMapMarkerCacheModel.markerTitle;

		if ((markerTitle != null) && (markerTitle.length() == 0)) {
			tourismMapMarkerCacheModel.markerTitle = null;
		}

		tourismMapMarkerCacheModel.markerInfo = getMarkerInfo();

		String markerInfo = tourismMapMarkerCacheModel.markerInfo;

		if ((markerInfo != null) && (markerInfo.length() == 0)) {
			tourismMapMarkerCacheModel.markerInfo = null;
		}

		tourismMapMarkerCacheModel.markerAddress = getMarkerAddress();

		String markerAddress = tourismMapMarkerCacheModel.markerAddress;

		if ((markerAddress != null) && (markerAddress.length() == 0)) {
			tourismMapMarkerCacheModel.markerAddress = null;
		}

		tourismMapMarkerCacheModel.markerImageId = getMarkerImageId();

		tourismMapMarkerCacheModel.markerLongitude = getMarkerLongitude();

		String markerLongitude = tourismMapMarkerCacheModel.markerLongitude;

		if ((markerLongitude != null) && (markerLongitude.length() == 0)) {
			tourismMapMarkerCacheModel.markerLongitude = null;
		}

		tourismMapMarkerCacheModel.markerLatitude = getMarkerLatitude();

		String markerLatitude = tourismMapMarkerCacheModel.markerLatitude;

		if ((markerLatitude != null) && (markerLatitude.length() == 0)) {
			tourismMapMarkerCacheModel.markerLatitude = null;
		}

		return tourismMapMarkerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{markerId=");
		sb.append(getMarkerId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", markerGroupId=");
		sb.append(getMarkerGroupId());
		sb.append(", markerTitle=");
		sb.append(getMarkerTitle());
		sb.append(", markerInfo=");
		sb.append(getMarkerInfo());
		sb.append(", markerAddress=");
		sb.append(getMarkerAddress());
		sb.append(", markerImageId=");
		sb.append(getMarkerImageId());
		sb.append(", markerLongitude=");
		sb.append(getMarkerLongitude());
		sb.append(", markerLatitude=");
		sb.append(getMarkerLatitude());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.portal_egov.portlet.tourism_map.model.TourismMapMarker");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>markerId</column-name><column-value><![CDATA[");
		sb.append(getMarkerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markerGroupId</column-name><column-value><![CDATA[");
		sb.append(getMarkerGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markerTitle</column-name><column-value><![CDATA[");
		sb.append(getMarkerTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markerInfo</column-name><column-value><![CDATA[");
		sb.append(getMarkerInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markerAddress</column-name><column-value><![CDATA[");
		sb.append(getMarkerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markerImageId</column-name><column-value><![CDATA[");
		sb.append(getMarkerImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markerLongitude</column-name><column-value><![CDATA[");
		sb.append(getMarkerLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markerLatitude</column-name><column-value><![CDATA[");
		sb.append(getMarkerLatitude());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TourismMapMarker.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TourismMapMarker.class
		};
	private long _markerId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _markerGroupId;
	private long _originalMarkerGroupId;
	private boolean _setOriginalMarkerGroupId;
	private String _markerTitle;
	private String _markerInfo;
	private String _markerAddress;
	private long _markerImageId;
	private String _markerLongitude;
	private String _markerLatitude;
	private long _columnBitmask;
	private TourismMapMarker _escapedModelProxy;
}