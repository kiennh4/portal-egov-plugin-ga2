/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.contacts.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.contacts.model.Contacts;
import com.portal_egov.portlet.contacts.model.ContactsModel;
import com.portal_egov.portlet.contacts.model.ContactsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Contacts service. Represents a row in the &quot;Contacts&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.contacts.model.ContactsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactsImpl}.
 * </p>
 *
 * @author HungDX
 * @see ContactsImpl
 * @see com.portal_egov.portlet.contacts.model.Contacts
 * @see com.portal_egov.portlet.contacts.model.ContactsModel
 * @generated
 */
@JSON(strict = true)
public class ContactsModelImpl extends BaseModelImpl<Contacts>
	implements ContactsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contacts model instance should use the {@link com.portal_egov.portlet.contacts.model.Contacts} interface instead.
	 */
	public static final String TABLE_NAME = "Contacts";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contactId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "departmentId", Types.BIGINT },
			{ "imageId", Types.BIGINT },
			{ "contactName", Types.VARCHAR },
			{ "jobTitle", Types.VARCHAR },
			{ "phoneNumbers", Types.VARCHAR },
			{ "homePhone", Types.VARCHAR },
			{ "mobile", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "displayPriority", Types.INTEGER },
			{ "contactStatus", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Contacts (contactId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,departmentId LONG,imageId LONG,contactName VARCHAR(150) null,jobTitle VARCHAR(150) null,phoneNumbers VARCHAR(75) null,homePhone VARCHAR(75) null,mobile VARCHAR(75) null,email VARCHAR(75) null,displayPriority INTEGER,contactStatus INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Contacts";
	public static final String ORDER_BY_JPQL = " ORDER BY contacts.departmentId ASC, contacts.displayPriority ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Contacts.departmentId ASC, Contacts.displayPriority ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.contacts.model.Contacts"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.contacts.model.Contacts"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.contacts.model.Contacts"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long CONTACTSTATUS_COLUMN_BITMASK = 2L;
	public static long DEPARTMENTID_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Contacts toModel(ContactsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Contacts model = new ContactsImpl();

		model.setContactId(soapModel.getContactId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDepartmentId(soapModel.getDepartmentId());
		model.setImageId(soapModel.getImageId());
		model.setContactName(soapModel.getContactName());
		model.setJobTitle(soapModel.getJobTitle());
		model.setPhoneNumbers(soapModel.getPhoneNumbers());
		model.setHomePhone(soapModel.getHomePhone());
		model.setMobile(soapModel.getMobile());
		model.setEmail(soapModel.getEmail());
		model.setDisplayPriority(soapModel.getDisplayPriority());
		model.setContactStatus(soapModel.getContactStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Contacts> toModels(ContactsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Contacts> models = new ArrayList<Contacts>(soapModels.length);

		for (ContactsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.contacts.model.Contacts"));

	public ContactsModelImpl() {
	}

	public long getPrimaryKey() {
		return _contactId;
	}

	public void setPrimaryKey(long primaryKey) {
		setContactId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_contactId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Contacts.class;
	}

	public String getModelClassName() {
		return Contacts.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contactId", getContactId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("departmentId", getDepartmentId());
		attributes.put("imageId", getImageId());
		attributes.put("contactName", getContactName());
		attributes.put("jobTitle", getJobTitle());
		attributes.put("phoneNumbers", getPhoneNumbers());
		attributes.put("homePhone", getHomePhone());
		attributes.put("mobile", getMobile());
		attributes.put("email", getEmail());
		attributes.put("displayPriority", getDisplayPriority());
		attributes.put("contactStatus", getContactStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contactId = (Long)attributes.get("contactId");

		if (contactId != null) {
			setContactId(contactId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long departmentId = (Long)attributes.get("departmentId");

		if (departmentId != null) {
			setDepartmentId(departmentId);
		}

		Long imageId = (Long)attributes.get("imageId");

		if (imageId != null) {
			setImageId(imageId);
		}

		String contactName = (String)attributes.get("contactName");

		if (contactName != null) {
			setContactName(contactName);
		}

		String jobTitle = (String)attributes.get("jobTitle");

		if (jobTitle != null) {
			setJobTitle(jobTitle);
		}

		String phoneNumbers = (String)attributes.get("phoneNumbers");

		if (phoneNumbers != null) {
			setPhoneNumbers(phoneNumbers);
		}

		String homePhone = (String)attributes.get("homePhone");

		if (homePhone != null) {
			setHomePhone(homePhone);
		}

		String mobile = (String)attributes.get("mobile");

		if (mobile != null) {
			setMobile(mobile);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Integer displayPriority = (Integer)attributes.get("displayPriority");

		if (displayPriority != null) {
			setDisplayPriority(displayPriority);
		}

		Integer contactStatus = (Integer)attributes.get("contactStatus");

		if (contactStatus != null) {
			setContactStatus(contactStatus);
		}
	}

	@JSON
	public long getContactId() {
		return _contactId;
	}

	public void setContactId(long contactId) {
		_contactId = contactId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getDepartmentId() {
		return _departmentId;
	}

	public void setDepartmentId(long departmentId) {
		_columnBitmask = -1L;

		if (!_setOriginalDepartmentId) {
			_setOriginalDepartmentId = true;

			_originalDepartmentId = _departmentId;
		}

		_departmentId = departmentId;
	}

	public long getOriginalDepartmentId() {
		return _originalDepartmentId;
	}

	@JSON
	public long getImageId() {
		return _imageId;
	}

	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	@JSON
	public String getContactName() {
		if (_contactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactName;
		}
	}

	public void setContactName(String contactName) {
		_contactName = contactName;
	}

	@JSON
	public String getJobTitle() {
		if (_jobTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobTitle;
		}
	}

	public void setJobTitle(String jobTitle) {
		_jobTitle = jobTitle;
	}

	@JSON
	public String getPhoneNumbers() {
		if (_phoneNumbers == null) {
			return StringPool.BLANK;
		}
		else {
			return _phoneNumbers;
		}
	}

	public void setPhoneNumbers(String phoneNumbers) {
		_phoneNumbers = phoneNumbers;
	}

	@JSON
	public String getHomePhone() {
		if (_homePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _homePhone;
		}
	}

	public void setHomePhone(String homePhone) {
		_homePhone = homePhone;
	}

	@JSON
	public String getMobile() {
		if (_mobile == null) {
			return StringPool.BLANK;
		}
		else {
			return _mobile;
		}
	}

	public void setMobile(String mobile) {
		_mobile = mobile;
	}

	@JSON
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	public int getDisplayPriority() {
		return _displayPriority;
	}

	public void setDisplayPriority(int displayPriority) {
		_columnBitmask = -1L;

		_displayPriority = displayPriority;
	}

	@JSON
	public int getContactStatus() {
		return _contactStatus;
	}

	public void setContactStatus(int contactStatus) {
		_columnBitmask |= CONTACTSTATUS_COLUMN_BITMASK;

		if (!_setOriginalContactStatus) {
			_setOriginalContactStatus = true;

			_originalContactStatus = _contactStatus;
		}

		_contactStatus = contactStatus;
	}

	public int getOriginalContactStatus() {
		return _originalContactStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Contacts.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Contacts toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Contacts)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ContactsImpl contactsImpl = new ContactsImpl();

		contactsImpl.setContactId(getContactId());
		contactsImpl.setGroupId(getGroupId());
		contactsImpl.setCompanyId(getCompanyId());
		contactsImpl.setUserId(getUserId());
		contactsImpl.setUserName(getUserName());
		contactsImpl.setCreateDate(getCreateDate());
		contactsImpl.setModifiedDate(getModifiedDate());
		contactsImpl.setDepartmentId(getDepartmentId());
		contactsImpl.setImageId(getImageId());
		contactsImpl.setContactName(getContactName());
		contactsImpl.setJobTitle(getJobTitle());
		contactsImpl.setPhoneNumbers(getPhoneNumbers());
		contactsImpl.setHomePhone(getHomePhone());
		contactsImpl.setMobile(getMobile());
		contactsImpl.setEmail(getEmail());
		contactsImpl.setDisplayPriority(getDisplayPriority());
		contactsImpl.setContactStatus(getContactStatus());

		contactsImpl.resetOriginalValues();

		return contactsImpl;
	}

	public int compareTo(Contacts contacts) {
		int value = 0;

		if (getDepartmentId() < contacts.getDepartmentId()) {
			value = -1;
		}
		else if (getDepartmentId() > contacts.getDepartmentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getDisplayPriority() < contacts.getDisplayPriority()) {
			value = -1;
		}
		else if (getDisplayPriority() > contacts.getDisplayPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Contacts contacts = null;

		try {
			contacts = (Contacts)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = contacts.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContactsModelImpl contactsModelImpl = this;

		contactsModelImpl._originalGroupId = contactsModelImpl._groupId;

		contactsModelImpl._setOriginalGroupId = false;

		contactsModelImpl._originalCompanyId = contactsModelImpl._companyId;

		contactsModelImpl._setOriginalCompanyId = false;

		contactsModelImpl._originalDepartmentId = contactsModelImpl._departmentId;

		contactsModelImpl._setOriginalDepartmentId = false;

		contactsModelImpl._originalContactStatus = contactsModelImpl._contactStatus;

		contactsModelImpl._setOriginalContactStatus = false;

		contactsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Contacts> toCacheModel() {
		ContactsCacheModel contactsCacheModel = new ContactsCacheModel();

		contactsCacheModel.contactId = getContactId();

		contactsCacheModel.groupId = getGroupId();

		contactsCacheModel.companyId = getCompanyId();

		contactsCacheModel.userId = getUserId();

		contactsCacheModel.userName = getUserName();

		String userName = contactsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contactsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			contactsCacheModel.createDate = createDate.getTime();
		}
		else {
			contactsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contactsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contactsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contactsCacheModel.departmentId = getDepartmentId();

		contactsCacheModel.imageId = getImageId();

		contactsCacheModel.contactName = getContactName();

		String contactName = contactsCacheModel.contactName;

		if ((contactName != null) && (contactName.length() == 0)) {
			contactsCacheModel.contactName = null;
		}

		contactsCacheModel.jobTitle = getJobTitle();

		String jobTitle = contactsCacheModel.jobTitle;

		if ((jobTitle != null) && (jobTitle.length() == 0)) {
			contactsCacheModel.jobTitle = null;
		}

		contactsCacheModel.phoneNumbers = getPhoneNumbers();

		String phoneNumbers = contactsCacheModel.phoneNumbers;

		if ((phoneNumbers != null) && (phoneNumbers.length() == 0)) {
			contactsCacheModel.phoneNumbers = null;
		}

		contactsCacheModel.homePhone = getHomePhone();

		String homePhone = contactsCacheModel.homePhone;

		if ((homePhone != null) && (homePhone.length() == 0)) {
			contactsCacheModel.homePhone = null;
		}

		contactsCacheModel.mobile = getMobile();

		String mobile = contactsCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			contactsCacheModel.mobile = null;
		}

		contactsCacheModel.email = getEmail();

		String email = contactsCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			contactsCacheModel.email = null;
		}

		contactsCacheModel.displayPriority = getDisplayPriority();

		contactsCacheModel.contactStatus = getContactStatus();

		return contactsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{contactId=");
		sb.append(getContactId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", departmentId=");
		sb.append(getDepartmentId());
		sb.append(", imageId=");
		sb.append(getImageId());
		sb.append(", contactName=");
		sb.append(getContactName());
		sb.append(", jobTitle=");
		sb.append(getJobTitle());
		sb.append(", phoneNumbers=");
		sb.append(getPhoneNumbers());
		sb.append(", homePhone=");
		sb.append(getHomePhone());
		sb.append(", mobile=");
		sb.append(getMobile());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", displayPriority=");
		sb.append(getDisplayPriority());
		sb.append(", contactStatus=");
		sb.append(getContactStatus());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.portal_egov.portlet.contacts.model.Contacts");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contactId</column-name><column-value><![CDATA[");
		sb.append(getContactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentId</column-name><column-value><![CDATA[");
		sb.append(getDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactName</column-name><column-value><![CDATA[");
		sb.append(getContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobTitle</column-name><column-value><![CDATA[");
		sb.append(getJobTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneNumbers</column-name><column-value><![CDATA[");
		sb.append(getPhoneNumbers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homePhone</column-name><column-value><![CDATA[");
		sb.append(getHomePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobile</column-name><column-value><![CDATA[");
		sb.append(getMobile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayPriority</column-name><column-value><![CDATA[");
		sb.append(getDisplayPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactStatus</column-name><column-value><![CDATA[");
		sb.append(getContactStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Contacts.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Contacts.class
		};
	private long _contactId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _departmentId;
	private long _originalDepartmentId;
	private boolean _setOriginalDepartmentId;
	private long _imageId;
	private String _contactName;
	private String _jobTitle;
	private String _phoneNumbers;
	private String _homePhone;
	private String _mobile;
	private String _email;
	private int _displayPriority;
	private int _contactStatus;
	private int _originalContactStatus;
	private boolean _setOriginalContactStatus;
	private long _columnBitmask;
	private Contacts _escapedModelProxy;
}