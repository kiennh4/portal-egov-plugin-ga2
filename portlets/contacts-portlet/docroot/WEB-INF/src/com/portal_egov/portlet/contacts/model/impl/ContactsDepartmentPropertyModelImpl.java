/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.contacts.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.contacts.model.ContactsDepartmentProperty;
import com.portal_egov.portlet.contacts.model.ContactsDepartmentPropertyModel;
import com.portal_egov.portlet.contacts.model.ContactsDepartmentPropertySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContactsDepartmentProperty service. Represents a row in the &quot;ContactsDepartmentProperty&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.contacts.model.ContactsDepartmentPropertyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactsDepartmentPropertyImpl}.
 * </p>
 *
 * @author HungDX
 * @see ContactsDepartmentPropertyImpl
 * @see com.portal_egov.portlet.contacts.model.ContactsDepartmentProperty
 * @see com.portal_egov.portlet.contacts.model.ContactsDepartmentPropertyModel
 * @generated
 */
@JSON(strict = true)
public class ContactsDepartmentPropertyModelImpl extends BaseModelImpl<ContactsDepartmentProperty>
	implements ContactsDepartmentPropertyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contacts department property model instance should use the {@link com.portal_egov.portlet.contacts.model.ContactsDepartmentProperty} interface instead.
	 */
	public static final String TABLE_NAME = "ContactsDepartmentProperty";
	public static final Object[][] TABLE_COLUMNS = {
			{ "propertyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "departmentId", Types.BIGINT },
			{ "propertyKey", Types.VARCHAR },
			{ "propertyValue", Types.VARCHAR },
			{ "propertyType", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ContactsDepartmentProperty (propertyId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,departmentId LONG,propertyKey VARCHAR(150) null,propertyValue VARCHAR(1000) null,propertyType VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ContactsDepartmentProperty";
	public static final String ORDER_BY_JPQL = " ORDER BY contactsDepartmentProperty.departmentId ASC, contactsDepartmentProperty.propertyKey ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ContactsDepartmentProperty.departmentId ASC, ContactsDepartmentProperty.propertyKey ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.contacts.model.ContactsDepartmentProperty"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.contacts.model.ContactsDepartmentProperty"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.contacts.model.ContactsDepartmentProperty"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long DEPARTMENTID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long PROPERTYKEY_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ContactsDepartmentProperty toModel(
		ContactsDepartmentPropertySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ContactsDepartmentProperty model = new ContactsDepartmentPropertyImpl();

		model.setPropertyId(soapModel.getPropertyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDepartmentId(soapModel.getDepartmentId());
		model.setPropertyKey(soapModel.getPropertyKey());
		model.setPropertyValue(soapModel.getPropertyValue());
		model.setPropertyType(soapModel.getPropertyType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ContactsDepartmentProperty> toModels(
		ContactsDepartmentPropertySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ContactsDepartmentProperty> models = new ArrayList<ContactsDepartmentProperty>(soapModels.length);

		for (ContactsDepartmentPropertySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.contacts.model.ContactsDepartmentProperty"));

	public ContactsDepartmentPropertyModelImpl() {
	}

	public long getPrimaryKey() {
		return _propertyId;
	}

	public void setPrimaryKey(long primaryKey) {
		setPropertyId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_propertyId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ContactsDepartmentProperty.class;
	}

	public String getModelClassName() {
		return ContactsDepartmentProperty.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("propertyId", getPropertyId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("departmentId", getDepartmentId());
		attributes.put("propertyKey", getPropertyKey());
		attributes.put("propertyValue", getPropertyValue());
		attributes.put("propertyType", getPropertyType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long propertyId = (Long)attributes.get("propertyId");

		if (propertyId != null) {
			setPropertyId(propertyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long departmentId = (Long)attributes.get("departmentId");

		if (departmentId != null) {
			setDepartmentId(departmentId);
		}

		String propertyKey = (String)attributes.get("propertyKey");

		if (propertyKey != null) {
			setPropertyKey(propertyKey);
		}

		String propertyValue = (String)attributes.get("propertyValue");

		if (propertyValue != null) {
			setPropertyValue(propertyValue);
		}

		String propertyType = (String)attributes.get("propertyType");

		if (propertyType != null) {
			setPropertyType(propertyType);
		}
	}

	@JSON
	public long getPropertyId() {
		return _propertyId;
	}

	public void setPropertyId(long propertyId) {
		_propertyId = propertyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getDepartmentId() {
		return _departmentId;
	}

	public void setDepartmentId(long departmentId) {
		_columnBitmask = -1L;

		if (!_setOriginalDepartmentId) {
			_setOriginalDepartmentId = true;

			_originalDepartmentId = _departmentId;
		}

		_departmentId = departmentId;
	}

	public long getOriginalDepartmentId() {
		return _originalDepartmentId;
	}

	@JSON
	public String getPropertyKey() {
		if (_propertyKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _propertyKey;
		}
	}

	public void setPropertyKey(String propertyKey) {
		_columnBitmask = -1L;

		if (_originalPropertyKey == null) {
			_originalPropertyKey = _propertyKey;
		}

		_propertyKey = propertyKey;
	}

	public String getOriginalPropertyKey() {
		return GetterUtil.getString(_originalPropertyKey);
	}

	@JSON
	public String getPropertyValue() {
		if (_propertyValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _propertyValue;
		}
	}

	public void setPropertyValue(String propertyValue) {
		_propertyValue = propertyValue;
	}

	@JSON
	public String getPropertyType() {
		if (_propertyType == null) {
			return StringPool.BLANK;
		}
		else {
			return _propertyType;
		}
	}

	public void setPropertyType(String propertyType) {
		_propertyType = propertyType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ContactsDepartmentProperty.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactsDepartmentProperty toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ContactsDepartmentProperty)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ContactsDepartmentPropertyImpl contactsDepartmentPropertyImpl = new ContactsDepartmentPropertyImpl();

		contactsDepartmentPropertyImpl.setPropertyId(getPropertyId());
		contactsDepartmentPropertyImpl.setGroupId(getGroupId());
		contactsDepartmentPropertyImpl.setCompanyId(getCompanyId());
		contactsDepartmentPropertyImpl.setUserId(getUserId());
		contactsDepartmentPropertyImpl.setUserName(getUserName());
		contactsDepartmentPropertyImpl.setCreateDate(getCreateDate());
		contactsDepartmentPropertyImpl.setModifiedDate(getModifiedDate());
		contactsDepartmentPropertyImpl.setDepartmentId(getDepartmentId());
		contactsDepartmentPropertyImpl.setPropertyKey(getPropertyKey());
		contactsDepartmentPropertyImpl.setPropertyValue(getPropertyValue());
		contactsDepartmentPropertyImpl.setPropertyType(getPropertyType());

		contactsDepartmentPropertyImpl.resetOriginalValues();

		return contactsDepartmentPropertyImpl;
	}

	public int compareTo(ContactsDepartmentProperty contactsDepartmentProperty) {
		int value = 0;

		if (getDepartmentId() < contactsDepartmentProperty.getDepartmentId()) {
			value = -1;
		}
		else if (getDepartmentId() > contactsDepartmentProperty.getDepartmentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getPropertyKey().toLowerCase()
					.compareTo(contactsDepartmentProperty.getPropertyKey()
														 .toLowerCase());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ContactsDepartmentProperty contactsDepartmentProperty = null;

		try {
			contactsDepartmentProperty = (ContactsDepartmentProperty)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = contactsDepartmentProperty.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContactsDepartmentPropertyModelImpl contactsDepartmentPropertyModelImpl = this;

		contactsDepartmentPropertyModelImpl._originalGroupId = contactsDepartmentPropertyModelImpl._groupId;

		contactsDepartmentPropertyModelImpl._setOriginalGroupId = false;

		contactsDepartmentPropertyModelImpl._originalCompanyId = contactsDepartmentPropertyModelImpl._companyId;

		contactsDepartmentPropertyModelImpl._setOriginalCompanyId = false;

		contactsDepartmentPropertyModelImpl._originalDepartmentId = contactsDepartmentPropertyModelImpl._departmentId;

		contactsDepartmentPropertyModelImpl._setOriginalDepartmentId = false;

		contactsDepartmentPropertyModelImpl._originalPropertyKey = contactsDepartmentPropertyModelImpl._propertyKey;

		contactsDepartmentPropertyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactsDepartmentProperty> toCacheModel() {
		ContactsDepartmentPropertyCacheModel contactsDepartmentPropertyCacheModel =
			new ContactsDepartmentPropertyCacheModel();

		contactsDepartmentPropertyCacheModel.propertyId = getPropertyId();

		contactsDepartmentPropertyCacheModel.groupId = getGroupId();

		contactsDepartmentPropertyCacheModel.companyId = getCompanyId();

		contactsDepartmentPropertyCacheModel.userId = getUserId();

		contactsDepartmentPropertyCacheModel.userName = getUserName();

		String userName = contactsDepartmentPropertyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contactsDepartmentPropertyCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			contactsDepartmentPropertyCacheModel.createDate = createDate.getTime();
		}
		else {
			contactsDepartmentPropertyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contactsDepartmentPropertyCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contactsDepartmentPropertyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contactsDepartmentPropertyCacheModel.departmentId = getDepartmentId();

		contactsDepartmentPropertyCacheModel.propertyKey = getPropertyKey();

		String propertyKey = contactsDepartmentPropertyCacheModel.propertyKey;

		if ((propertyKey != null) && (propertyKey.length() == 0)) {
			contactsDepartmentPropertyCacheModel.propertyKey = null;
		}

		contactsDepartmentPropertyCacheModel.propertyValue = getPropertyValue();

		String propertyValue = contactsDepartmentPropertyCacheModel.propertyValue;

		if ((propertyValue != null) && (propertyValue.length() == 0)) {
			contactsDepartmentPropertyCacheModel.propertyValue = null;
		}

		contactsDepartmentPropertyCacheModel.propertyType = getPropertyType();

		String propertyType = contactsDepartmentPropertyCacheModel.propertyType;

		if ((propertyType != null) && (propertyType.length() == 0)) {
			contactsDepartmentPropertyCacheModel.propertyType = null;
		}

		return contactsDepartmentPropertyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{propertyId=");
		sb.append(getPropertyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", departmentId=");
		sb.append(getDepartmentId());
		sb.append(", propertyKey=");
		sb.append(getPropertyKey());
		sb.append(", propertyValue=");
		sb.append(getPropertyValue());
		sb.append(", propertyType=");
		sb.append(getPropertyType());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append(
			"com.portal_egov.portlet.contacts.model.ContactsDepartmentProperty");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>propertyId</column-name><column-value><![CDATA[");
		sb.append(getPropertyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentId</column-name><column-value><![CDATA[");
		sb.append(getDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propertyKey</column-name><column-value><![CDATA[");
		sb.append(getPropertyKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propertyValue</column-name><column-value><![CDATA[");
		sb.append(getPropertyValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propertyType</column-name><column-value><![CDATA[");
		sb.append(getPropertyType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ContactsDepartmentProperty.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ContactsDepartmentProperty.class
		};
	private long _propertyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _departmentId;
	private long _originalDepartmentId;
	private boolean _setOriginalDepartmentId;
	private String _propertyKey;
	private String _originalPropertyKey;
	private String _propertyValue;
	private String _propertyType;
	private long _columnBitmask;
	private ContactsDepartmentProperty _escapedModelProxy;
}