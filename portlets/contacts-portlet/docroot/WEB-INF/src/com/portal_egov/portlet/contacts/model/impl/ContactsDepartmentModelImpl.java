/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.contacts.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.contacts.model.ContactsDepartment;
import com.portal_egov.portlet.contacts.model.ContactsDepartmentModel;
import com.portal_egov.portlet.contacts.model.ContactsDepartmentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContactsDepartment service. Represents a row in the &quot;ContactsDepartment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.contacts.model.ContactsDepartmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactsDepartmentImpl}.
 * </p>
 *
 * @author HungDX
 * @see ContactsDepartmentImpl
 * @see com.portal_egov.portlet.contacts.model.ContactsDepartment
 * @see com.portal_egov.portlet.contacts.model.ContactsDepartmentModel
 * @generated
 */
@JSON(strict = true)
public class ContactsDepartmentModelImpl extends BaseModelImpl<ContactsDepartment>
	implements ContactsDepartmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contacts department model instance should use the {@link com.portal_egov.portlet.contacts.model.ContactsDepartment} interface instead.
	 */
	public static final String TABLE_NAME = "ContactsDepartment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "departmentId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "parentId", Types.BIGINT },
			{ "departmentName", Types.VARCHAR },
			{ "departmentAddress", Types.VARCHAR },
			{ "departmentPhone", Types.VARCHAR },
			{ "departmentWebsite", Types.VARCHAR },
			{ "departmentEmail", Types.VARCHAR },
			{ "displayPriority", Types.INTEGER },
			{ "departmentStatus", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table ContactsDepartment (departmentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,parentId LONG,departmentName VARCHAR(500) null,departmentAddress VARCHAR(1000) null,departmentPhone VARCHAR(75) null,departmentWebsite VARCHAR(150) null,departmentEmail VARCHAR(75) null,displayPriority INTEGER,departmentStatus INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table ContactsDepartment";
	public static final String ORDER_BY_JPQL = " ORDER BY contactsDepartment.parentId ASC, contactsDepartment.displayPriority ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ContactsDepartment.parentId ASC, ContactsDepartment.displayPriority ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.contacts.model.ContactsDepartment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.contacts.model.ContactsDepartment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.contacts.model.ContactsDepartment"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long DEPARTMENTSTATUS_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long PARENTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ContactsDepartment toModel(ContactsDepartmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ContactsDepartment model = new ContactsDepartmentImpl();

		model.setDepartmentId(soapModel.getDepartmentId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setParentId(soapModel.getParentId());
		model.setDepartmentName(soapModel.getDepartmentName());
		model.setDepartmentAddress(soapModel.getDepartmentAddress());
		model.setDepartmentPhone(soapModel.getDepartmentPhone());
		model.setDepartmentWebsite(soapModel.getDepartmentWebsite());
		model.setDepartmentEmail(soapModel.getDepartmentEmail());
		model.setDisplayPriority(soapModel.getDisplayPriority());
		model.setDepartmentStatus(soapModel.getDepartmentStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ContactsDepartment> toModels(
		ContactsDepartmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ContactsDepartment> models = new ArrayList<ContactsDepartment>(soapModels.length);

		for (ContactsDepartmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.contacts.model.ContactsDepartment"));

	public ContactsDepartmentModelImpl() {
	}

	public long getPrimaryKey() {
		return _departmentId;
	}

	public void setPrimaryKey(long primaryKey) {
		setDepartmentId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_departmentId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ContactsDepartment.class;
	}

	public String getModelClassName() {
		return ContactsDepartment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("departmentId", getDepartmentId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("parentId", getParentId());
		attributes.put("departmentName", getDepartmentName());
		attributes.put("departmentAddress", getDepartmentAddress());
		attributes.put("departmentPhone", getDepartmentPhone());
		attributes.put("departmentWebsite", getDepartmentWebsite());
		attributes.put("departmentEmail", getDepartmentEmail());
		attributes.put("displayPriority", getDisplayPriority());
		attributes.put("departmentStatus", getDepartmentStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long departmentId = (Long)attributes.get("departmentId");

		if (departmentId != null) {
			setDepartmentId(departmentId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		String departmentName = (String)attributes.get("departmentName");

		if (departmentName != null) {
			setDepartmentName(departmentName);
		}

		String departmentAddress = (String)attributes.get("departmentAddress");

		if (departmentAddress != null) {
			setDepartmentAddress(departmentAddress);
		}

		String departmentPhone = (String)attributes.get("departmentPhone");

		if (departmentPhone != null) {
			setDepartmentPhone(departmentPhone);
		}

		String departmentWebsite = (String)attributes.get("departmentWebsite");

		if (departmentWebsite != null) {
			setDepartmentWebsite(departmentWebsite);
		}

		String departmentEmail = (String)attributes.get("departmentEmail");

		if (departmentEmail != null) {
			setDepartmentEmail(departmentEmail);
		}

		Integer displayPriority = (Integer)attributes.get("displayPriority");

		if (displayPriority != null) {
			setDisplayPriority(displayPriority);
		}

		Integer departmentStatus = (Integer)attributes.get("departmentStatus");

		if (departmentStatus != null) {
			setDepartmentStatus(departmentStatus);
		}
	}

	@JSON
	public long getDepartmentId() {
		return _departmentId;
	}

	public void setDepartmentId(long departmentId) {
		_departmentId = departmentId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getParentId() {
		return _parentId;
	}

	public void setParentId(long parentId) {
		_columnBitmask = -1L;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	@JSON
	public String getDepartmentName() {
		if (_departmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentName;
		}
	}

	public void setDepartmentName(String departmentName) {
		_departmentName = departmentName;
	}

	@JSON
	public String getDepartmentAddress() {
		if (_departmentAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentAddress;
		}
	}

	public void setDepartmentAddress(String departmentAddress) {
		_departmentAddress = departmentAddress;
	}

	@JSON
	public String getDepartmentPhone() {
		if (_departmentPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentPhone;
		}
	}

	public void setDepartmentPhone(String departmentPhone) {
		_departmentPhone = departmentPhone;
	}

	@JSON
	public String getDepartmentWebsite() {
		if (_departmentWebsite == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentWebsite;
		}
	}

	public void setDepartmentWebsite(String departmentWebsite) {
		_departmentWebsite = departmentWebsite;
	}

	@JSON
	public String getDepartmentEmail() {
		if (_departmentEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentEmail;
		}
	}

	public void setDepartmentEmail(String departmentEmail) {
		_departmentEmail = departmentEmail;
	}

	@JSON
	public int getDisplayPriority() {
		return _displayPriority;
	}

	public void setDisplayPriority(int displayPriority) {
		_columnBitmask = -1L;

		_displayPriority = displayPriority;
	}

	@JSON
	public int getDepartmentStatus() {
		return _departmentStatus;
	}

	public void setDepartmentStatus(int departmentStatus) {
		_columnBitmask |= DEPARTMENTSTATUS_COLUMN_BITMASK;

		if (!_setOriginalDepartmentStatus) {
			_setOriginalDepartmentStatus = true;

			_originalDepartmentStatus = _departmentStatus;
		}

		_departmentStatus = departmentStatus;
	}

	public int getOriginalDepartmentStatus() {
		return _originalDepartmentStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ContactsDepartment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactsDepartment toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ContactsDepartment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ContactsDepartmentImpl contactsDepartmentImpl = new ContactsDepartmentImpl();

		contactsDepartmentImpl.setDepartmentId(getDepartmentId());
		contactsDepartmentImpl.setGroupId(getGroupId());
		contactsDepartmentImpl.setCompanyId(getCompanyId());
		contactsDepartmentImpl.setUserId(getUserId());
		contactsDepartmentImpl.setUserName(getUserName());
		contactsDepartmentImpl.setCreateDate(getCreateDate());
		contactsDepartmentImpl.setModifiedDate(getModifiedDate());
		contactsDepartmentImpl.setParentId(getParentId());
		contactsDepartmentImpl.setDepartmentName(getDepartmentName());
		contactsDepartmentImpl.setDepartmentAddress(getDepartmentAddress());
		contactsDepartmentImpl.setDepartmentPhone(getDepartmentPhone());
		contactsDepartmentImpl.setDepartmentWebsite(getDepartmentWebsite());
		contactsDepartmentImpl.setDepartmentEmail(getDepartmentEmail());
		contactsDepartmentImpl.setDisplayPriority(getDisplayPriority());
		contactsDepartmentImpl.setDepartmentStatus(getDepartmentStatus());

		contactsDepartmentImpl.resetOriginalValues();

		return contactsDepartmentImpl;
	}

	public int compareTo(ContactsDepartment contactsDepartment) {
		int value = 0;

		if (getParentId() < contactsDepartment.getParentId()) {
			value = -1;
		}
		else if (getParentId() > contactsDepartment.getParentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getDisplayPriority() < contactsDepartment.getDisplayPriority()) {
			value = -1;
		}
		else if (getDisplayPriority() > contactsDepartment.getDisplayPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ContactsDepartment contactsDepartment = null;

		try {
			contactsDepartment = (ContactsDepartment)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = contactsDepartment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContactsDepartmentModelImpl contactsDepartmentModelImpl = this;

		contactsDepartmentModelImpl._originalGroupId = contactsDepartmentModelImpl._groupId;

		contactsDepartmentModelImpl._setOriginalGroupId = false;

		contactsDepartmentModelImpl._originalCompanyId = contactsDepartmentModelImpl._companyId;

		contactsDepartmentModelImpl._setOriginalCompanyId = false;

		contactsDepartmentModelImpl._originalParentId = contactsDepartmentModelImpl._parentId;

		contactsDepartmentModelImpl._setOriginalParentId = false;

		contactsDepartmentModelImpl._originalDepartmentStatus = contactsDepartmentModelImpl._departmentStatus;

		contactsDepartmentModelImpl._setOriginalDepartmentStatus = false;

		contactsDepartmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactsDepartment> toCacheModel() {
		ContactsDepartmentCacheModel contactsDepartmentCacheModel = new ContactsDepartmentCacheModel();

		contactsDepartmentCacheModel.departmentId = getDepartmentId();

		contactsDepartmentCacheModel.groupId = getGroupId();

		contactsDepartmentCacheModel.companyId = getCompanyId();

		contactsDepartmentCacheModel.userId = getUserId();

		contactsDepartmentCacheModel.userName = getUserName();

		String userName = contactsDepartmentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contactsDepartmentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			contactsDepartmentCacheModel.createDate = createDate.getTime();
		}
		else {
			contactsDepartmentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contactsDepartmentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contactsDepartmentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contactsDepartmentCacheModel.parentId = getParentId();

		contactsDepartmentCacheModel.departmentName = getDepartmentName();

		String departmentName = contactsDepartmentCacheModel.departmentName;

		if ((departmentName != null) && (departmentName.length() == 0)) {
			contactsDepartmentCacheModel.departmentName = null;
		}

		contactsDepartmentCacheModel.departmentAddress = getDepartmentAddress();

		String departmentAddress = contactsDepartmentCacheModel.departmentAddress;

		if ((departmentAddress != null) && (departmentAddress.length() == 0)) {
			contactsDepartmentCacheModel.departmentAddress = null;
		}

		contactsDepartmentCacheModel.departmentPhone = getDepartmentPhone();

		String departmentPhone = contactsDepartmentCacheModel.departmentPhone;

		if ((departmentPhone != null) && (departmentPhone.length() == 0)) {
			contactsDepartmentCacheModel.departmentPhone = null;
		}

		contactsDepartmentCacheModel.departmentWebsite = getDepartmentWebsite();

		String departmentWebsite = contactsDepartmentCacheModel.departmentWebsite;

		if ((departmentWebsite != null) && (departmentWebsite.length() == 0)) {
			contactsDepartmentCacheModel.departmentWebsite = null;
		}

		contactsDepartmentCacheModel.departmentEmail = getDepartmentEmail();

		String departmentEmail = contactsDepartmentCacheModel.departmentEmail;

		if ((departmentEmail != null) && (departmentEmail.length() == 0)) {
			contactsDepartmentCacheModel.departmentEmail = null;
		}

		contactsDepartmentCacheModel.displayPriority = getDisplayPriority();

		contactsDepartmentCacheModel.departmentStatus = getDepartmentStatus();

		return contactsDepartmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{departmentId=");
		sb.append(getDepartmentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", departmentName=");
		sb.append(getDepartmentName());
		sb.append(", departmentAddress=");
		sb.append(getDepartmentAddress());
		sb.append(", departmentPhone=");
		sb.append(getDepartmentPhone());
		sb.append(", departmentWebsite=");
		sb.append(getDepartmentWebsite());
		sb.append(", departmentEmail=");
		sb.append(getDepartmentEmail());
		sb.append(", displayPriority=");
		sb.append(getDisplayPriority());
		sb.append(", departmentStatus=");
		sb.append(getDepartmentStatus());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.portal_egov.portlet.contacts.model.ContactsDepartment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>departmentId</column-name><column-value><![CDATA[");
		sb.append(getDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentName</column-name><column-value><![CDATA[");
		sb.append(getDepartmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentAddress</column-name><column-value><![CDATA[");
		sb.append(getDepartmentAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentPhone</column-name><column-value><![CDATA[");
		sb.append(getDepartmentPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentWebsite</column-name><column-value><![CDATA[");
		sb.append(getDepartmentWebsite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentEmail</column-name><column-value><![CDATA[");
		sb.append(getDepartmentEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayPriority</column-name><column-value><![CDATA[");
		sb.append(getDisplayPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentStatus</column-name><column-value><![CDATA[");
		sb.append(getDepartmentStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ContactsDepartment.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ContactsDepartment.class
		};
	private long _departmentId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private String _departmentName;
	private String _departmentAddress;
	private String _departmentPhone;
	private String _departmentWebsite;
	private String _departmentEmail;
	private int _displayPriority;
	private int _departmentStatus;
	private int _originalDepartmentStatus;
	private boolean _setOriginalDepartmentStatus;
	private long _columnBitmask;
	private ContactsDepartment _escapedModelProxy;
}