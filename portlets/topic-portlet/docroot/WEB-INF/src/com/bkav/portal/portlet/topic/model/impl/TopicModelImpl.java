/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bkav.portal.portlet.topic.model.impl;

import com.bkav.portal.portlet.topic.model.Topic;
import com.bkav.portal.portlet.topic.model.TopicModel;
import com.bkav.portal.portlet.topic.model.TopicSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Topic service. Represents a row in the &quot;Asset_Topic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bkav.portal.portlet.topic.model.TopicModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TopicImpl}.
 * </p>
 *
 * @author anhbdb
 * @see TopicImpl
 * @see com.bkav.portal.portlet.topic.model.Topic
 * @see com.bkav.portal.portlet.topic.model.TopicModel
 * @generated
 */
@JSON(strict = true)
public class TopicModelImpl extends BaseModelImpl<Topic> implements TopicModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a topic model instance should use the {@link com.bkav.portal.portlet.topic.model.Topic} interface instead.
	 */
	public static final String TABLE_NAME = "Asset_Topic";
	public static final Object[][] TABLE_COLUMNS = {
			{ "topicId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "topicName", Types.VARCHAR },
			{ "categoryIds", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Asset_Topic (topicId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,topicName VARCHAR(75) null,categoryIds VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Asset_Topic";
	public static final String ORDER_BY_JPQL = " ORDER BY topic.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Asset_Topic.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bkav.portal.portlet.topic.model.Topic"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bkav.portal.portlet.topic.model.Topic"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bkav.portal.portlet.topic.model.Topic"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Topic toModel(TopicSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Topic model = new TopicImpl();

		model.setTopicId(soapModel.getTopicId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setTopicName(soapModel.getTopicName());
		model.setCategoryIds(soapModel.getCategoryIds());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Topic> toModels(TopicSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Topic> models = new ArrayList<Topic>(soapModels.length);

		for (TopicSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bkav.portal.portlet.topic.model.Topic"));

	public TopicModelImpl() {
	}

	public long getPrimaryKey() {
		return _topicId;
	}

	public void setPrimaryKey(long primaryKey) {
		setTopicId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_topicId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Topic.class;
	}

	public String getModelClassName() {
		return Topic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("topicId", getTopicId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("topicName", getTopicName());
		attributes.put("categoryIds", getCategoryIds());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long topicId = (Long)attributes.get("topicId");

		if (topicId != null) {
			setTopicId(topicId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String topicName = (String)attributes.get("topicName");

		if (topicName != null) {
			setTopicName(topicName);
		}

		String categoryIds = (String)attributes.get("categoryIds");

		if (categoryIds != null) {
			setCategoryIds(categoryIds);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	public long getTopicId() {
		return _topicId;
	}

	public void setTopicId(long topicId) {
		_topicId = topicId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public String getTopicName() {
		if (_topicName == null) {
			return StringPool.BLANK;
		}
		else {
			return _topicName;
		}
	}

	public void setTopicName(String topicName) {
		_topicName = topicName;
	}

	@JSON
	public String getCategoryIds() {
		if (_categoryIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryIds;
		}
	}

	public void setCategoryIds(String categoryIds) {
		_categoryIds = categoryIds;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Topic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Topic toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Topic)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TopicImpl topicImpl = new TopicImpl();

		topicImpl.setTopicId(getTopicId());
		topicImpl.setGroupId(getGroupId());
		topicImpl.setCompanyId(getCompanyId());
		topicImpl.setUserId(getUserId());
		topicImpl.setUserName(getUserName());
		topicImpl.setTopicName(getTopicName());
		topicImpl.setCategoryIds(getCategoryIds());
		topicImpl.setCreateDate(getCreateDate());
		topicImpl.setModifiedDate(getModifiedDate());

		topicImpl.resetOriginalValues();

		return topicImpl;
	}

	public int compareTo(Topic topic) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), topic.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Topic topic = null;

		try {
			topic = (Topic)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = topic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TopicModelImpl topicModelImpl = this;

		topicModelImpl._originalGroupId = topicModelImpl._groupId;

		topicModelImpl._setOriginalGroupId = false;

		topicModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Topic> toCacheModel() {
		TopicCacheModel topicCacheModel = new TopicCacheModel();

		topicCacheModel.topicId = getTopicId();

		topicCacheModel.groupId = getGroupId();

		topicCacheModel.companyId = getCompanyId();

		topicCacheModel.userId = getUserId();

		topicCacheModel.userName = getUserName();

		String userName = topicCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			topicCacheModel.userName = null;
		}

		topicCacheModel.topicName = getTopicName();

		String topicName = topicCacheModel.topicName;

		if ((topicName != null) && (topicName.length() == 0)) {
			topicCacheModel.topicName = null;
		}

		topicCacheModel.categoryIds = getCategoryIds();

		String categoryIds = topicCacheModel.categoryIds;

		if ((categoryIds != null) && (categoryIds.length() == 0)) {
			topicCacheModel.categoryIds = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			topicCacheModel.createDate = createDate.getTime();
		}
		else {
			topicCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			topicCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			topicCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return topicCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{topicId=");
		sb.append(getTopicId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", topicName=");
		sb.append(getTopicName());
		sb.append(", categoryIds=");
		sb.append(getCategoryIds());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.bkav.portal.portlet.topic.model.Topic");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>topicId</column-name><column-value><![CDATA[");
		sb.append(getTopicId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>topicName</column-name><column-value><![CDATA[");
		sb.append(getTopicName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryIds</column-name><column-value><![CDATA[");
		sb.append(getCategoryIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Topic.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Topic.class
		};
	private long _topicId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private String _topicName;
	private String _categoryIds;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private Topic _escapedModelProxy;
}