/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bkav.portal.portlet.complaints.model.impl;

import com.bkav.portal.portlet.complaints.model.Complaints;
import com.bkav.portal.portlet.complaints.model.ComplaintsModel;
import com.bkav.portal.portlet.complaints.model.ComplaintsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Complaints service. Represents a row in the &quot;Complaints&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bkav.portal.portlet.complaints.model.ComplaintsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ComplaintsImpl}.
 * </p>
 *
 * @author AnhBDb
 * @see ComplaintsImpl
 * @see com.bkav.portal.portlet.complaints.model.Complaints
 * @see com.bkav.portal.portlet.complaints.model.ComplaintsModel
 * @generated
 */
@JSON(strict = true)
public class ComplaintsModelImpl extends BaseModelImpl<Complaints>
	implements ComplaintsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a complaints model instance should use the {@link com.bkav.portal.portlet.complaints.model.Complaints} interface instead.
	 */
	public static final String TABLE_NAME = "Complaints";
	public static final Object[][] TABLE_COLUMNS = {
			{ "complaintId", Types.BIGINT },
			{ "complaintNumber", Types.VARCHAR },
			{ "signingDate", Types.TIMESTAMP },
			{ "complaintName", Types.VARCHAR },
			{ "complaintDesc", Types.VARCHAR },
			{ "complaintContent", Types.VARCHAR },
			{ "replyDocument", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Complaints (complaintId LONG not null primary key,complaintNumber VARCHAR(75) null,signingDate DATE null,complaintName VARCHAR(1000) null,complaintDesc VARCHAR(2000) null,complaintContent TEXT null,replyDocument TEXT null,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Complaints";
	public static final String ORDER_BY_JPQL = " ORDER BY complaints.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Complaints.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bkav.portal.portlet.complaints.model.Complaints"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bkav.portal.portlet.complaints.model.Complaints"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bkav.portal.portlet.complaints.model.Complaints"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Complaints toModel(ComplaintsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Complaints model = new ComplaintsImpl();

		model.setComplaintId(soapModel.getComplaintId());
		model.setComplaintNumber(soapModel.getComplaintNumber());
		model.setSigningDate(soapModel.getSigningDate());
		model.setComplaintName(soapModel.getComplaintName());
		model.setComplaintDesc(soapModel.getComplaintDesc());
		model.setComplaintContent(soapModel.getComplaintContent());
		model.setReplyDocument(soapModel.getReplyDocument());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Complaints> toModels(ComplaintsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Complaints> models = new ArrayList<Complaints>(soapModels.length);

		for (ComplaintsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bkav.portal.portlet.complaints.model.Complaints"));

	public ComplaintsModelImpl() {
	}

	public long getPrimaryKey() {
		return _complaintId;
	}

	public void setPrimaryKey(long primaryKey) {
		setComplaintId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_complaintId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Complaints.class;
	}

	public String getModelClassName() {
		return Complaints.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("complaintId", getComplaintId());
		attributes.put("complaintNumber", getComplaintNumber());
		attributes.put("signingDate", getSigningDate());
		attributes.put("complaintName", getComplaintName());
		attributes.put("complaintDesc", getComplaintDesc());
		attributes.put("complaintContent", getComplaintContent());
		attributes.put("replyDocument", getReplyDocument());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long complaintId = (Long)attributes.get("complaintId");

		if (complaintId != null) {
			setComplaintId(complaintId);
		}

		String complaintNumber = (String)attributes.get("complaintNumber");

		if (complaintNumber != null) {
			setComplaintNumber(complaintNumber);
		}

		Date signingDate = (Date)attributes.get("signingDate");

		if (signingDate != null) {
			setSigningDate(signingDate);
		}

		String complaintName = (String)attributes.get("complaintName");

		if (complaintName != null) {
			setComplaintName(complaintName);
		}

		String complaintDesc = (String)attributes.get("complaintDesc");

		if (complaintDesc != null) {
			setComplaintDesc(complaintDesc);
		}

		String complaintContent = (String)attributes.get("complaintContent");

		if (complaintContent != null) {
			setComplaintContent(complaintContent);
		}

		String replyDocument = (String)attributes.get("replyDocument");

		if (replyDocument != null) {
			setReplyDocument(replyDocument);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	public long getComplaintId() {
		return _complaintId;
	}

	public void setComplaintId(long complaintId) {
		_complaintId = complaintId;
	}

	@JSON
	public String getComplaintNumber() {
		if (_complaintNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _complaintNumber;
		}
	}

	public void setComplaintNumber(String complaintNumber) {
		_complaintNumber = complaintNumber;
	}

	@JSON
	public Date getSigningDate() {
		return _signingDate;
	}

	public void setSigningDate(Date signingDate) {
		_signingDate = signingDate;
	}

	@JSON
	public String getComplaintName() {
		if (_complaintName == null) {
			return StringPool.BLANK;
		}
		else {
			return _complaintName;
		}
	}

	public void setComplaintName(String complaintName) {
		_complaintName = complaintName;
	}

	@JSON
	public String getComplaintDesc() {
		if (_complaintDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _complaintDesc;
		}
	}

	public void setComplaintDesc(String complaintDesc) {
		_complaintDesc = complaintDesc;
	}

	@JSON
	public String getComplaintContent() {
		if (_complaintContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _complaintContent;
		}
	}

	public void setComplaintContent(String complaintContent) {
		_complaintContent = complaintContent;
	}

	@JSON
	public String getReplyDocument() {
		if (_replyDocument == null) {
			return StringPool.BLANK;
		}
		else {
			return _replyDocument;
		}
	}

	public void setReplyDocument(String replyDocument) {
		_replyDocument = replyDocument;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Complaints.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Complaints toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Complaints)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ComplaintsImpl complaintsImpl = new ComplaintsImpl();

		complaintsImpl.setComplaintId(getComplaintId());
		complaintsImpl.setComplaintNumber(getComplaintNumber());
		complaintsImpl.setSigningDate(getSigningDate());
		complaintsImpl.setComplaintName(getComplaintName());
		complaintsImpl.setComplaintDesc(getComplaintDesc());
		complaintsImpl.setComplaintContent(getComplaintContent());
		complaintsImpl.setReplyDocument(getReplyDocument());
		complaintsImpl.setGroupId(getGroupId());
		complaintsImpl.setCompanyId(getCompanyId());
		complaintsImpl.setUserId(getUserId());
		complaintsImpl.setCreateDate(getCreateDate());
		complaintsImpl.setModifiedDate(getModifiedDate());

		complaintsImpl.resetOriginalValues();

		return complaintsImpl;
	}

	public int compareTo(Complaints complaints) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), complaints.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Complaints complaints = null;

		try {
			complaints = (Complaints)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = complaints.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ComplaintsModelImpl complaintsModelImpl = this;

		complaintsModelImpl._originalGroupId = complaintsModelImpl._groupId;

		complaintsModelImpl._setOriginalGroupId = false;

		complaintsModelImpl._originalCompanyId = complaintsModelImpl._companyId;

		complaintsModelImpl._setOriginalCompanyId = false;

		complaintsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Complaints> toCacheModel() {
		ComplaintsCacheModel complaintsCacheModel = new ComplaintsCacheModel();

		complaintsCacheModel.complaintId = getComplaintId();

		complaintsCacheModel.complaintNumber = getComplaintNumber();

		String complaintNumber = complaintsCacheModel.complaintNumber;

		if ((complaintNumber != null) && (complaintNumber.length() == 0)) {
			complaintsCacheModel.complaintNumber = null;
		}

		Date signingDate = getSigningDate();

		if (signingDate != null) {
			complaintsCacheModel.signingDate = signingDate.getTime();
		}
		else {
			complaintsCacheModel.signingDate = Long.MIN_VALUE;
		}

		complaintsCacheModel.complaintName = getComplaintName();

		String complaintName = complaintsCacheModel.complaintName;

		if ((complaintName != null) && (complaintName.length() == 0)) {
			complaintsCacheModel.complaintName = null;
		}

		complaintsCacheModel.complaintDesc = getComplaintDesc();

		String complaintDesc = complaintsCacheModel.complaintDesc;

		if ((complaintDesc != null) && (complaintDesc.length() == 0)) {
			complaintsCacheModel.complaintDesc = null;
		}

		complaintsCacheModel.complaintContent = getComplaintContent();

		String complaintContent = complaintsCacheModel.complaintContent;

		if ((complaintContent != null) && (complaintContent.length() == 0)) {
			complaintsCacheModel.complaintContent = null;
		}

		complaintsCacheModel.replyDocument = getReplyDocument();

		String replyDocument = complaintsCacheModel.replyDocument;

		if ((replyDocument != null) && (replyDocument.length() == 0)) {
			complaintsCacheModel.replyDocument = null;
		}

		complaintsCacheModel.groupId = getGroupId();

		complaintsCacheModel.companyId = getCompanyId();

		complaintsCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			complaintsCacheModel.createDate = createDate.getTime();
		}
		else {
			complaintsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			complaintsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			complaintsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return complaintsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{complaintId=");
		sb.append(getComplaintId());
		sb.append(", complaintNumber=");
		sb.append(getComplaintNumber());
		sb.append(", signingDate=");
		sb.append(getSigningDate());
		sb.append(", complaintName=");
		sb.append(getComplaintName());
		sb.append(", complaintDesc=");
		sb.append(getComplaintDesc());
		sb.append(", complaintContent=");
		sb.append(getComplaintContent());
		sb.append(", replyDocument=");
		sb.append(getReplyDocument());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.bkav.portal.portlet.complaints.model.Complaints");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>complaintId</column-name><column-value><![CDATA[");
		sb.append(getComplaintId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complaintNumber</column-name><column-value><![CDATA[");
		sb.append(getComplaintNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signingDate</column-name><column-value><![CDATA[");
		sb.append(getSigningDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complaintName</column-name><column-value><![CDATA[");
		sb.append(getComplaintName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complaintDesc</column-name><column-value><![CDATA[");
		sb.append(getComplaintDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complaintContent</column-name><column-value><![CDATA[");
		sb.append(getComplaintContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replyDocument</column-name><column-value><![CDATA[");
		sb.append(getReplyDocument());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Complaints.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Complaints.class
		};
	private long _complaintId;
	private String _complaintNumber;
	private Date _signingDate;
	private String _complaintName;
	private String _complaintDesc;
	private String _complaintContent;
	private String _replyDocument;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private Complaints _escapedModelProxy;
}