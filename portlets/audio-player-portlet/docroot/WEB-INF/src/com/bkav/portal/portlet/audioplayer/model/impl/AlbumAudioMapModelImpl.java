/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bkav.portal.portlet.audioplayer.model.impl;

import com.bkav.portal.portlet.audioplayer.model.AlbumAudioMap;
import com.bkav.portal.portlet.audioplayer.model.AlbumAudioMapModel;
import com.bkav.portal.portlet.audioplayer.model.AlbumAudioMapSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AlbumAudioMap service. Represents a row in the &quot;AudioPlayer_AlbumAudioMap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bkav.portal.portlet.audioplayer.model.AlbumAudioMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AlbumAudioMapImpl}.
 * </p>
 *
 * @author anhbdb
 * @see AlbumAudioMapImpl
 * @see com.bkav.portal.portlet.audioplayer.model.AlbumAudioMap
 * @see com.bkav.portal.portlet.audioplayer.model.AlbumAudioMapModel
 * @generated
 */
@JSON(strict = true)
public class AlbumAudioMapModelImpl extends BaseModelImpl<AlbumAudioMap>
	implements AlbumAudioMapModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a album audio map model instance should use the {@link com.bkav.portal.portlet.audioplayer.model.AlbumAudioMap} interface instead.
	 */
	public static final String TABLE_NAME = "AudioPlayer_AlbumAudioMap";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mapId", Types.BIGINT },
			{ "albumId", Types.BIGINT },
			{ "audioId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table AudioPlayer_AlbumAudioMap (mapId LONG not null primary key,albumId LONG,audioId LONG)";
	public static final String TABLE_SQL_DROP = "drop table AudioPlayer_AlbumAudioMap";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bkav.portal.portlet.audioplayer.model.AlbumAudioMap"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bkav.portal.portlet.audioplayer.model.AlbumAudioMap"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bkav.portal.portlet.audioplayer.model.AlbumAudioMap"),
			true);
	public static long ALBUMID_COLUMN_BITMASK = 1L;
	public static long AUDIOID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AlbumAudioMap toModel(AlbumAudioMapSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AlbumAudioMap model = new AlbumAudioMapImpl();

		model.setMapId(soapModel.getMapId());
		model.setAlbumId(soapModel.getAlbumId());
		model.setAudioId(soapModel.getAudioId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AlbumAudioMap> toModels(AlbumAudioMapSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AlbumAudioMap> models = new ArrayList<AlbumAudioMap>(soapModels.length);

		for (AlbumAudioMapSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bkav.portal.portlet.audioplayer.model.AlbumAudioMap"));

	public AlbumAudioMapModelImpl() {
	}

	public long getPrimaryKey() {
		return _mapId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMapId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_mapId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AlbumAudioMap.class;
	}

	public String getModelClassName() {
		return AlbumAudioMap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mapId", getMapId());
		attributes.put("albumId", getAlbumId());
		attributes.put("audioId", getAudioId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long mapId = (Long)attributes.get("mapId");

		if (mapId != null) {
			setMapId(mapId);
		}

		Long albumId = (Long)attributes.get("albumId");

		if (albumId != null) {
			setAlbumId(albumId);
		}

		Long audioId = (Long)attributes.get("audioId");

		if (audioId != null) {
			setAudioId(audioId);
		}
	}

	@JSON
	public long getMapId() {
		return _mapId;
	}

	public void setMapId(long mapId) {
		_mapId = mapId;
	}

	@JSON
	public long getAlbumId() {
		return _albumId;
	}

	public void setAlbumId(long albumId) {
		_columnBitmask |= ALBUMID_COLUMN_BITMASK;

		if (!_setOriginalAlbumId) {
			_setOriginalAlbumId = true;

			_originalAlbumId = _albumId;
		}

		_albumId = albumId;
	}

	public long getOriginalAlbumId() {
		return _originalAlbumId;
	}

	@JSON
	public long getAudioId() {
		return _audioId;
	}

	public void setAudioId(long audioId) {
		_columnBitmask |= AUDIOID_COLUMN_BITMASK;

		if (!_setOriginalAudioId) {
			_setOriginalAudioId = true;

			_originalAudioId = _audioId;
		}

		_audioId = audioId;
	}

	public long getOriginalAudioId() {
		return _originalAudioId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AlbumAudioMap.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AlbumAudioMap toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AlbumAudioMap)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AlbumAudioMapImpl albumAudioMapImpl = new AlbumAudioMapImpl();

		albumAudioMapImpl.setMapId(getMapId());
		albumAudioMapImpl.setAlbumId(getAlbumId());
		albumAudioMapImpl.setAudioId(getAudioId());

		albumAudioMapImpl.resetOriginalValues();

		return albumAudioMapImpl;
	}

	public int compareTo(AlbumAudioMap albumAudioMap) {
		long primaryKey = albumAudioMap.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AlbumAudioMap albumAudioMap = null;

		try {
			albumAudioMap = (AlbumAudioMap)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = albumAudioMap.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AlbumAudioMapModelImpl albumAudioMapModelImpl = this;

		albumAudioMapModelImpl._originalAlbumId = albumAudioMapModelImpl._albumId;

		albumAudioMapModelImpl._setOriginalAlbumId = false;

		albumAudioMapModelImpl._originalAudioId = albumAudioMapModelImpl._audioId;

		albumAudioMapModelImpl._setOriginalAudioId = false;

		albumAudioMapModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AlbumAudioMap> toCacheModel() {
		AlbumAudioMapCacheModel albumAudioMapCacheModel = new AlbumAudioMapCacheModel();

		albumAudioMapCacheModel.mapId = getMapId();

		albumAudioMapCacheModel.albumId = getAlbumId();

		albumAudioMapCacheModel.audioId = getAudioId();

		return albumAudioMapCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{mapId=");
		sb.append(getMapId());
		sb.append(", albumId=");
		sb.append(getAlbumId());
		sb.append(", audioId=");
		sb.append(getAudioId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.bkav.portal.portlet.audioplayer.model.AlbumAudioMap");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mapId</column-name><column-value><![CDATA[");
		sb.append(getMapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>albumId</column-name><column-value><![CDATA[");
		sb.append(getAlbumId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>audioId</column-name><column-value><![CDATA[");
		sb.append(getAudioId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AlbumAudioMap.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AlbumAudioMap.class
		};
	private long _mapId;
	private long _albumId;
	private long _originalAlbumId;
	private boolean _setOriginalAlbumId;
	private long _audioId;
	private long _originalAudioId;
	private boolean _setOriginalAudioId;
	private long _columnBitmask;
	private AlbumAudioMap _escapedModelProxy;
}