/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.compaints.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.compaints.model.Complaint_DlFileEntries;
import com.portal_egov.portlet.compaints.model.Complaint_DlFileEntriesModel;
import com.portal_egov.portlet.compaints.model.Complaint_DlFileEntriesSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Complaint_DlFileEntries service. Represents a row in the &quot;Complaint_DlFileEntries&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.compaints.model.Complaint_DlFileEntriesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Complaint_DlFileEntriesImpl}.
 * </p>
 *
 * @author HungDX
 * @see Complaint_DlFileEntriesImpl
 * @see com.portal_egov.portlet.compaints.model.Complaint_DlFileEntries
 * @see com.portal_egov.portlet.compaints.model.Complaint_DlFileEntriesModel
 * @generated
 */
@JSON(strict = true)
public class Complaint_DlFileEntriesModelImpl extends BaseModelImpl<Complaint_DlFileEntries>
	implements Complaint_DlFileEntriesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a complaint_ dl file entries model instance should use the {@link com.portal_egov.portlet.compaints.model.Complaint_DlFileEntries} interface instead.
	 */
	public static final String TABLE_NAME = "Complaint_DlFileEntries";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "complaintId", Types.BIGINT },
			{ "fileEntryId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Complaint_DlFileEntries (id_ LONG not null primary key,complaintId LONG,fileEntryId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Complaint_DlFileEntries";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.compaints.model.Complaint_DlFileEntries"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.compaints.model.Complaint_DlFileEntries"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.compaints.model.Complaint_DlFileEntries"),
			true);
	public static long COMPLAINTID_COLUMN_BITMASK = 1L;
	public static long FILEENTRYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Complaint_DlFileEntries toModel(
		Complaint_DlFileEntriesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Complaint_DlFileEntries model = new Complaint_DlFileEntriesImpl();

		model.setId(soapModel.getId());
		model.setComplaintId(soapModel.getComplaintId());
		model.setFileEntryId(soapModel.getFileEntryId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Complaint_DlFileEntries> toModels(
		Complaint_DlFileEntriesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Complaint_DlFileEntries> models = new ArrayList<Complaint_DlFileEntries>(soapModels.length);

		for (Complaint_DlFileEntriesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.compaints.model.Complaint_DlFileEntries"));

	public Complaint_DlFileEntriesModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Complaint_DlFileEntries.class;
	}

	public String getModelClassName() {
		return Complaint_DlFileEntries.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("complaintId", getComplaintId());
		attributes.put("fileEntryId", getFileEntryId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long complaintId = (Long)attributes.get("complaintId");

		if (complaintId != null) {
			setComplaintId(complaintId);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public long getComplaintId() {
		return _complaintId;
	}

	public void setComplaintId(long complaintId) {
		_columnBitmask |= COMPLAINTID_COLUMN_BITMASK;

		if (!_setOriginalComplaintId) {
			_setOriginalComplaintId = true;

			_originalComplaintId = _complaintId;
		}

		_complaintId = complaintId;
	}

	public long getOriginalComplaintId() {
		return _originalComplaintId;
	}

	@JSON
	public long getFileEntryId() {
		return _fileEntryId;
	}

	public void setFileEntryId(long fileEntryId) {
		_columnBitmask |= FILEENTRYID_COLUMN_BITMASK;

		if (!_setOriginalFileEntryId) {
			_setOriginalFileEntryId = true;

			_originalFileEntryId = _fileEntryId;
		}

		_fileEntryId = fileEntryId;
	}

	public long getOriginalFileEntryId() {
		return _originalFileEntryId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Complaint_DlFileEntries.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Complaint_DlFileEntries toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Complaint_DlFileEntries)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		Complaint_DlFileEntriesImpl complaint_DlFileEntriesImpl = new Complaint_DlFileEntriesImpl();

		complaint_DlFileEntriesImpl.setId(getId());
		complaint_DlFileEntriesImpl.setComplaintId(getComplaintId());
		complaint_DlFileEntriesImpl.setFileEntryId(getFileEntryId());

		complaint_DlFileEntriesImpl.resetOriginalValues();

		return complaint_DlFileEntriesImpl;
	}

	public int compareTo(Complaint_DlFileEntries complaint_DlFileEntries) {
		long primaryKey = complaint_DlFileEntries.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Complaint_DlFileEntries complaint_DlFileEntries = null;

		try {
			complaint_DlFileEntries = (Complaint_DlFileEntries)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = complaint_DlFileEntries.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		Complaint_DlFileEntriesModelImpl complaint_DlFileEntriesModelImpl = this;

		complaint_DlFileEntriesModelImpl._originalComplaintId = complaint_DlFileEntriesModelImpl._complaintId;

		complaint_DlFileEntriesModelImpl._setOriginalComplaintId = false;

		complaint_DlFileEntriesModelImpl._originalFileEntryId = complaint_DlFileEntriesModelImpl._fileEntryId;

		complaint_DlFileEntriesModelImpl._setOriginalFileEntryId = false;

		complaint_DlFileEntriesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Complaint_DlFileEntries> toCacheModel() {
		Complaint_DlFileEntriesCacheModel complaint_DlFileEntriesCacheModel = new Complaint_DlFileEntriesCacheModel();

		complaint_DlFileEntriesCacheModel.id = getId();

		complaint_DlFileEntriesCacheModel.complaintId = getComplaintId();

		complaint_DlFileEntriesCacheModel.fileEntryId = getFileEntryId();

		return complaint_DlFileEntriesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", complaintId=");
		sb.append(getComplaintId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append(
			"com.portal_egov.portlet.compaints.model.Complaint_DlFileEntries");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complaintId</column-name><column-value><![CDATA[");
		sb.append(getComplaintId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Complaint_DlFileEntries.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Complaint_DlFileEntries.class
		};
	private long _id;
	private long _complaintId;
	private long _originalComplaintId;
	private boolean _setOriginalComplaintId;
	private long _fileEntryId;
	private long _originalFileEntryId;
	private boolean _setOriginalFileEntryId;
	private long _columnBitmask;
	private Complaint_DlFileEntries _escapedModelProxy;
}