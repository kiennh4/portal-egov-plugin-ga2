/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.landprice.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.landprice.model.LandPrice;
import com.portal_egov.portlet.landprice.model.LandPriceModel;
import com.portal_egov.portlet.landprice.model.LandPriceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LandPrice service. Represents a row in the &quot;LandPrice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.landprice.model.LandPriceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LandPriceImpl}.
 * </p>
 *
 * @author HungDX
 * @see LandPriceImpl
 * @see com.portal_egov.portlet.landprice.model.LandPrice
 * @see com.portal_egov.portlet.landprice.model.LandPriceModel
 * @generated
 */
@JSON(strict = true)
public class LandPriceModelImpl extends BaseModelImpl<LandPrice>
	implements LandPriceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a land price model instance should use the {@link com.portal_egov.portlet.landprice.model.LandPrice} interface instead.
	 */
	public static final String TABLE_NAME = "LandPrice";
	public static final Object[][] TABLE_COLUMNS = {
			{ "priceId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "locationId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "statisticYear", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table LandPrice (priceId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,locationId LONG,title VARCHAR(300) null,content STRING null,statisticYear INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table LandPrice";
	public static final String ORDER_BY_JPQL = " ORDER BY landPrice.locationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LandPrice.locationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.landprice.model.LandPrice"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.landprice.model.LandPrice"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.landprice.model.LandPrice"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long LOCATIONID_COLUMN_BITMASK = 2L;
	public static long STATISTICYEAR_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LandPrice toModel(LandPriceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LandPrice model = new LandPriceImpl();

		model.setPriceId(soapModel.getPriceId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLocationId(soapModel.getLocationId());
		model.setTitle(soapModel.getTitle());
		model.setContent(soapModel.getContent());
		model.setStatisticYear(soapModel.getStatisticYear());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LandPrice> toModels(LandPriceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LandPrice> models = new ArrayList<LandPrice>(soapModels.length);

		for (LandPriceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.landprice.model.LandPrice"));

	public LandPriceModelImpl() {
	}

	public long getPrimaryKey() {
		return _priceId;
	}

	public void setPrimaryKey(long primaryKey) {
		setPriceId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_priceId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LandPrice.class;
	}

	public String getModelClassName() {
		return LandPrice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("priceId", getPriceId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("locationId", getLocationId());
		attributes.put("title", getTitle());
		attributes.put("content", getContent());
		attributes.put("statisticYear", getStatisticYear());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long priceId = (Long)attributes.get("priceId");

		if (priceId != null) {
			setPriceId(priceId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long locationId = (Long)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Integer statisticYear = (Integer)attributes.get("statisticYear");

		if (statisticYear != null) {
			setStatisticYear(statisticYear);
		}
	}

	@JSON
	public long getPriceId() {
		return _priceId;
	}

	public void setPriceId(long priceId) {
		_priceId = priceId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getLocationId() {
		return _locationId;
	}

	public void setLocationId(long locationId) {
		_columnBitmask = -1L;

		if (!_setOriginalLocationId) {
			_setOriginalLocationId = true;

			_originalLocationId = _locationId;
		}

		_locationId = locationId;
	}

	public long getOriginalLocationId() {
		return _originalLocationId;
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	public void setContent(String content) {
		_content = content;
	}

	@JSON
	public int getStatisticYear() {
		return _statisticYear;
	}

	public void setStatisticYear(int statisticYear) {
		_columnBitmask |= STATISTICYEAR_COLUMN_BITMASK;

		if (!_setOriginalStatisticYear) {
			_setOriginalStatisticYear = true;

			_originalStatisticYear = _statisticYear;
		}

		_statisticYear = statisticYear;
	}

	public int getOriginalStatisticYear() {
		return _originalStatisticYear;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LandPrice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LandPrice toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LandPrice)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LandPriceImpl landPriceImpl = new LandPriceImpl();

		landPriceImpl.setPriceId(getPriceId());
		landPriceImpl.setCompanyId(getCompanyId());
		landPriceImpl.setGroupId(getGroupId());
		landPriceImpl.setUserId(getUserId());
		landPriceImpl.setUserName(getUserName());
		landPriceImpl.setCreateDate(getCreateDate());
		landPriceImpl.setModifiedDate(getModifiedDate());
		landPriceImpl.setLocationId(getLocationId());
		landPriceImpl.setTitle(getTitle());
		landPriceImpl.setContent(getContent());
		landPriceImpl.setStatisticYear(getStatisticYear());

		landPriceImpl.resetOriginalValues();

		return landPriceImpl;
	}

	public int compareTo(LandPrice landPrice) {
		int value = 0;

		if (getLocationId() < landPrice.getLocationId()) {
			value = -1;
		}
		else if (getLocationId() > landPrice.getLocationId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LandPrice landPrice = null;

		try {
			landPrice = (LandPrice)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = landPrice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LandPriceModelImpl landPriceModelImpl = this;

		landPriceModelImpl._originalGroupId = landPriceModelImpl._groupId;

		landPriceModelImpl._setOriginalGroupId = false;

		landPriceModelImpl._originalLocationId = landPriceModelImpl._locationId;

		landPriceModelImpl._setOriginalLocationId = false;

		landPriceModelImpl._originalStatisticYear = landPriceModelImpl._statisticYear;

		landPriceModelImpl._setOriginalStatisticYear = false;

		landPriceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LandPrice> toCacheModel() {
		LandPriceCacheModel landPriceCacheModel = new LandPriceCacheModel();

		landPriceCacheModel.priceId = getPriceId();

		landPriceCacheModel.companyId = getCompanyId();

		landPriceCacheModel.groupId = getGroupId();

		landPriceCacheModel.userId = getUserId();

		landPriceCacheModel.userName = getUserName();

		String userName = landPriceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			landPriceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			landPriceCacheModel.createDate = createDate.getTime();
		}
		else {
			landPriceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			landPriceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			landPriceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		landPriceCacheModel.locationId = getLocationId();

		landPriceCacheModel.title = getTitle();

		String title = landPriceCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			landPriceCacheModel.title = null;
		}

		landPriceCacheModel.content = getContent();

		String content = landPriceCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			landPriceCacheModel.content = null;
		}

		landPriceCacheModel.statisticYear = getStatisticYear();

		return landPriceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{priceId=");
		sb.append(getPriceId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", locationId=");
		sb.append(getLocationId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", statisticYear=");
		sb.append(getStatisticYear());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.portal_egov.portlet.landprice.model.LandPrice");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>priceId</column-name><column-value><![CDATA[");
		sb.append(getPriceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statisticYear</column-name><column-value><![CDATA[");
		sb.append(getStatisticYear());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LandPrice.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LandPrice.class
		};
	private long _priceId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _locationId;
	private long _originalLocationId;
	private boolean _setOriginalLocationId;
	private String _title;
	private String _content;
	private int _statisticYear;
	private int _originalStatisticYear;
	private boolean _setOriginalStatisticYear;
	private long _columnBitmask;
	private LandPrice _escapedModelProxy;
}