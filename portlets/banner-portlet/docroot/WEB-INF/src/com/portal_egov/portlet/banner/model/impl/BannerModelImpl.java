/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.banner.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.banner.model.Banner;
import com.portal_egov.portlet.banner.model.BannerModel;
import com.portal_egov.portlet.banner.model.BannerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Banner service. Represents a row in the &quot;Banner&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.banner.model.BannerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BannerImpl}.
 * </p>
 *
 * @author HungDX
 * @see BannerImpl
 * @see com.portal_egov.portlet.banner.model.Banner
 * @see com.portal_egov.portlet.banner.model.BannerModel
 * @generated
 */
@JSON(strict = true)
public class BannerModelImpl extends BaseModelImpl<Banner>
	implements BannerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a banner model instance should use the {@link com.portal_egov.portlet.banner.model.Banner} interface instead.
	 */
	public static final String TABLE_NAME = "Banner";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bannerId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "bannerGroupId", Types.BIGINT },
			{ "bannerTitle", Types.VARCHAR },
			{ "bannerLink", Types.VARCHAR },
			{ "bannerImageId", Types.BIGINT },
			{ "viewCounter", Types.INTEGER },
			{ "bannerStatus", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Banner (bannerId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,bannerGroupId LONG,bannerTitle VARCHAR(500) null,bannerLink VARCHAR(1000) null,bannerImageId LONG,viewCounter INTEGER,bannerStatus INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Banner";
	public static final String ORDER_BY_JPQL = " ORDER BY banner.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Banner.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.banner.model.Banner"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.banner.model.Banner"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.banner.model.Banner"),
			true);
	public static long BANNERGROUPID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Banner toModel(BannerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Banner model = new BannerImpl();

		model.setBannerId(soapModel.getBannerId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBannerGroupId(soapModel.getBannerGroupId());
		model.setBannerTitle(soapModel.getBannerTitle());
		model.setBannerLink(soapModel.getBannerLink());
		model.setBannerImageId(soapModel.getBannerImageId());
		model.setViewCounter(soapModel.getViewCounter());
		model.setBannerStatus(soapModel.getBannerStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Banner> toModels(BannerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Banner> models = new ArrayList<Banner>(soapModels.length);

		for (BannerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.banner.model.Banner"));

	public BannerModelImpl() {
	}

	public long getPrimaryKey() {
		return _bannerId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBannerId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_bannerId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Banner.class;
	}

	public String getModelClassName() {
		return Banner.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bannerId", getBannerId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("bannerGroupId", getBannerGroupId());
		attributes.put("bannerTitle", getBannerTitle());
		attributes.put("bannerLink", getBannerLink());
		attributes.put("bannerImageId", getBannerImageId());
		attributes.put("viewCounter", getViewCounter());
		attributes.put("bannerStatus", getBannerStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bannerId = (Long)attributes.get("bannerId");

		if (bannerId != null) {
			setBannerId(bannerId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long bannerGroupId = (Long)attributes.get("bannerGroupId");

		if (bannerGroupId != null) {
			setBannerGroupId(bannerGroupId);
		}

		String bannerTitle = (String)attributes.get("bannerTitle");

		if (bannerTitle != null) {
			setBannerTitle(bannerTitle);
		}

		String bannerLink = (String)attributes.get("bannerLink");

		if (bannerLink != null) {
			setBannerLink(bannerLink);
		}

		Long bannerImageId = (Long)attributes.get("bannerImageId");

		if (bannerImageId != null) {
			setBannerImageId(bannerImageId);
		}

		Integer viewCounter = (Integer)attributes.get("viewCounter");

		if (viewCounter != null) {
			setViewCounter(viewCounter);
		}

		Integer bannerStatus = (Integer)attributes.get("bannerStatus");

		if (bannerStatus != null) {
			setBannerStatus(bannerStatus);
		}
	}

	@JSON
	public long getBannerId() {
		return _bannerId;
	}

	public void setBannerId(long bannerId) {
		_bannerId = bannerId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getBannerGroupId() {
		return _bannerGroupId;
	}

	public void setBannerGroupId(long bannerGroupId) {
		_columnBitmask |= BANNERGROUPID_COLUMN_BITMASK;

		if (!_setOriginalBannerGroupId) {
			_setOriginalBannerGroupId = true;

			_originalBannerGroupId = _bannerGroupId;
		}

		_bannerGroupId = bannerGroupId;
	}

	public long getOriginalBannerGroupId() {
		return _originalBannerGroupId;
	}

	@JSON
	public String getBannerTitle() {
		if (_bannerTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _bannerTitle;
		}
	}

	public void setBannerTitle(String bannerTitle) {
		_bannerTitle = bannerTitle;
	}

	@JSON
	public String getBannerLink() {
		if (_bannerLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _bannerLink;
		}
	}

	public void setBannerLink(String bannerLink) {
		_bannerLink = bannerLink;
	}

	@JSON
	public long getBannerImageId() {
		return _bannerImageId;
	}

	public void setBannerImageId(long bannerImageId) {
		_bannerImageId = bannerImageId;
	}

	@JSON
	public int getViewCounter() {
		return _viewCounter;
	}

	public void setViewCounter(int viewCounter) {
		_viewCounter = viewCounter;
	}

	@JSON
	public int getBannerStatus() {
		return _bannerStatus;
	}

	public void setBannerStatus(int bannerStatus) {
		_bannerStatus = bannerStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Banner.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Banner toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Banner)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		BannerImpl bannerImpl = new BannerImpl();

		bannerImpl.setBannerId(getBannerId());
		bannerImpl.setCompanyId(getCompanyId());
		bannerImpl.setGroupId(getGroupId());
		bannerImpl.setUserId(getUserId());
		bannerImpl.setUserName(getUserName());
		bannerImpl.setCreateDate(getCreateDate());
		bannerImpl.setModifiedDate(getModifiedDate());
		bannerImpl.setBannerGroupId(getBannerGroupId());
		bannerImpl.setBannerTitle(getBannerTitle());
		bannerImpl.setBannerLink(getBannerLink());
		bannerImpl.setBannerImageId(getBannerImageId());
		bannerImpl.setViewCounter(getViewCounter());
		bannerImpl.setBannerStatus(getBannerStatus());

		bannerImpl.resetOriginalValues();

		return bannerImpl;
	}

	public int compareTo(Banner banner) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), banner.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Banner banner = null;

		try {
			banner = (Banner)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = banner.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BannerModelImpl bannerModelImpl = this;

		bannerModelImpl._originalCompanyId = bannerModelImpl._companyId;

		bannerModelImpl._setOriginalCompanyId = false;

		bannerModelImpl._originalGroupId = bannerModelImpl._groupId;

		bannerModelImpl._setOriginalGroupId = false;

		bannerModelImpl._originalBannerGroupId = bannerModelImpl._bannerGroupId;

		bannerModelImpl._setOriginalBannerGroupId = false;

		bannerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Banner> toCacheModel() {
		BannerCacheModel bannerCacheModel = new BannerCacheModel();

		bannerCacheModel.bannerId = getBannerId();

		bannerCacheModel.companyId = getCompanyId();

		bannerCacheModel.groupId = getGroupId();

		bannerCacheModel.userId = getUserId();

		bannerCacheModel.userName = getUserName();

		String userName = bannerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			bannerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			bannerCacheModel.createDate = createDate.getTime();
		}
		else {
			bannerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bannerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bannerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		bannerCacheModel.bannerGroupId = getBannerGroupId();

		bannerCacheModel.bannerTitle = getBannerTitle();

		String bannerTitle = bannerCacheModel.bannerTitle;

		if ((bannerTitle != null) && (bannerTitle.length() == 0)) {
			bannerCacheModel.bannerTitle = null;
		}

		bannerCacheModel.bannerLink = getBannerLink();

		String bannerLink = bannerCacheModel.bannerLink;

		if ((bannerLink != null) && (bannerLink.length() == 0)) {
			bannerCacheModel.bannerLink = null;
		}

		bannerCacheModel.bannerImageId = getBannerImageId();

		bannerCacheModel.viewCounter = getViewCounter();

		bannerCacheModel.bannerStatus = getBannerStatus();

		return bannerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{bannerId=");
		sb.append(getBannerId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", bannerGroupId=");
		sb.append(getBannerGroupId());
		sb.append(", bannerTitle=");
		sb.append(getBannerTitle());
		sb.append(", bannerLink=");
		sb.append(getBannerLink());
		sb.append(", bannerImageId=");
		sb.append(getBannerImageId());
		sb.append(", viewCounter=");
		sb.append(getViewCounter());
		sb.append(", bannerStatus=");
		sb.append(getBannerStatus());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.portal_egov.portlet.banner.model.Banner");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bannerId</column-name><column-value><![CDATA[");
		sb.append(getBannerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bannerGroupId</column-name><column-value><![CDATA[");
		sb.append(getBannerGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bannerTitle</column-name><column-value><![CDATA[");
		sb.append(getBannerTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bannerLink</column-name><column-value><![CDATA[");
		sb.append(getBannerLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bannerImageId</column-name><column-value><![CDATA[");
		sb.append(getBannerImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewCounter</column-name><column-value><![CDATA[");
		sb.append(getViewCounter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bannerStatus</column-name><column-value><![CDATA[");
		sb.append(getBannerStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Banner.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Banner.class
		};
	private long _bannerId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _bannerGroupId;
	private long _originalBannerGroupId;
	private boolean _setOriginalBannerGroupId;
	private String _bannerTitle;
	private String _bannerLink;
	private long _bannerImageId;
	private int _viewCounter;
	private int _bannerStatus;
	private long _columnBitmask;
	private Banner _escapedModelProxy;
}