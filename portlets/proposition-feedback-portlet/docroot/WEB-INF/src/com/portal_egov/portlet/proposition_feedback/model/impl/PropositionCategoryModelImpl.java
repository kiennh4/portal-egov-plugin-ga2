/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.proposition_feedback.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.proposition_feedback.model.PropositionCategory;
import com.portal_egov.portlet.proposition_feedback.model.PropositionCategoryModel;
import com.portal_egov.portlet.proposition_feedback.model.PropositionCategorySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PropositionCategory service. Represents a row in the &quot;PropositionCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.proposition_feedback.model.PropositionCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PropositionCategoryImpl}.
 * </p>
 *
 * @author HungDX
 * @see PropositionCategoryImpl
 * @see com.portal_egov.portlet.proposition_feedback.model.PropositionCategory
 * @see com.portal_egov.portlet.proposition_feedback.model.PropositionCategoryModel
 * @generated
 */
@JSON(strict = true)
public class PropositionCategoryModelImpl extends BaseModelImpl<PropositionCategory>
	implements PropositionCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a proposition category model instance should use the {@link com.portal_egov.portlet.proposition_feedback.model.PropositionCategory} interface instead.
	 */
	public static final String TABLE_NAME = "PropositionCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "categoryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "categoryTypeId", Types.INTEGER },
			{ "parentId", Types.BIGINT },
			{ "categoryName", Types.VARCHAR },
			{ "categoryDesc", Types.VARCHAR },
			{ "propositionCount", Types.INTEGER },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table PropositionCategory (categoryId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,categoryTypeId INTEGER,parentId LONG,categoryName VARCHAR(2000) null,categoryDesc STRING null,propositionCount INTEGER,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table PropositionCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY propositionCategory.categoryName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PropositionCategory.categoryName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.proposition_feedback.model.PropositionCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.proposition_feedback.model.PropositionCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.proposition_feedback.model.PropositionCategory"),
			true);
	public static long CATEGORYTYPEID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long PARENTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PropositionCategory toModel(PropositionCategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PropositionCategory model = new PropositionCategoryImpl();

		model.setCategoryId(soapModel.getCategoryId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCategoryTypeId(soapModel.getCategoryTypeId());
		model.setParentId(soapModel.getParentId());
		model.setCategoryName(soapModel.getCategoryName());
		model.setCategoryDesc(soapModel.getCategoryDesc());
		model.setPropositionCount(soapModel.getPropositionCount());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PropositionCategory> toModels(
		PropositionCategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PropositionCategory> models = new ArrayList<PropositionCategory>(soapModels.length);

		for (PropositionCategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.proposition_feedback.model.PropositionCategory"));

	public PropositionCategoryModelImpl() {
	}

	public long getPrimaryKey() {
		return _categoryId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCategoryId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_categoryId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return PropositionCategory.class;
	}

	public String getModelClassName() {
		return PropositionCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("categoryId", getCategoryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("categoryTypeId", getCategoryTypeId());
		attributes.put("parentId", getParentId());
		attributes.put("categoryName", getCategoryName());
		attributes.put("categoryDesc", getCategoryDesc());
		attributes.put("propositionCount", getPropositionCount());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer categoryTypeId = (Integer)attributes.get("categoryTypeId");

		if (categoryTypeId != null) {
			setCategoryTypeId(categoryTypeId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		String categoryName = (String)attributes.get("categoryName");

		if (categoryName != null) {
			setCategoryName(categoryName);
		}

		String categoryDesc = (String)attributes.get("categoryDesc");

		if (categoryDesc != null) {
			setCategoryDesc(categoryDesc);
		}

		Integer propositionCount = (Integer)attributes.get("propositionCount");

		if (propositionCount != null) {
			setPropositionCount(propositionCount);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	public long getCategoryId() {
		return _categoryId;
	}

	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public int getCategoryTypeId() {
		return _categoryTypeId;
	}

	public void setCategoryTypeId(int categoryTypeId) {
		_columnBitmask |= CATEGORYTYPEID_COLUMN_BITMASK;

		if (!_setOriginalCategoryTypeId) {
			_setOriginalCategoryTypeId = true;

			_originalCategoryTypeId = _categoryTypeId;
		}

		_categoryTypeId = categoryTypeId;
	}

	public int getOriginalCategoryTypeId() {
		return _originalCategoryTypeId;
	}

	@JSON
	public long getParentId() {
		return _parentId;
	}

	public void setParentId(long parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	@JSON
	public String getCategoryName() {
		if (_categoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryName;
		}
	}

	public void setCategoryName(String categoryName) {
		_columnBitmask = -1L;

		_categoryName = categoryName;
	}

	@JSON
	public String getCategoryDesc() {
		if (_categoryDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryDesc;
		}
	}

	public void setCategoryDesc(String categoryDesc) {
		_categoryDesc = categoryDesc;
	}

	@JSON
	public int getPropositionCount() {
		return _propositionCount;
	}

	public void setPropositionCount(int propositionCount) {
		_propositionCount = propositionCount;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PropositionCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PropositionCategory toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (PropositionCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PropositionCategoryImpl propositionCategoryImpl = new PropositionCategoryImpl();

		propositionCategoryImpl.setCategoryId(getCategoryId());
		propositionCategoryImpl.setCompanyId(getCompanyId());
		propositionCategoryImpl.setGroupId(getGroupId());
		propositionCategoryImpl.setUserId(getUserId());
		propositionCategoryImpl.setCategoryTypeId(getCategoryTypeId());
		propositionCategoryImpl.setParentId(getParentId());
		propositionCategoryImpl.setCategoryName(getCategoryName());
		propositionCategoryImpl.setCategoryDesc(getCategoryDesc());
		propositionCategoryImpl.setPropositionCount(getPropositionCount());
		propositionCategoryImpl.setCreateDate(getCreateDate());
		propositionCategoryImpl.setModifiedDate(getModifiedDate());

		propositionCategoryImpl.resetOriginalValues();

		return propositionCategoryImpl;
	}

	public int compareTo(PropositionCategory propositionCategory) {
		int value = 0;

		value = getCategoryName()
					.compareTo(propositionCategory.getCategoryName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		PropositionCategory propositionCategory = null;

		try {
			propositionCategory = (PropositionCategory)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = propositionCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PropositionCategoryModelImpl propositionCategoryModelImpl = this;

		propositionCategoryModelImpl._originalCompanyId = propositionCategoryModelImpl._companyId;

		propositionCategoryModelImpl._setOriginalCompanyId = false;

		propositionCategoryModelImpl._originalGroupId = propositionCategoryModelImpl._groupId;

		propositionCategoryModelImpl._setOriginalGroupId = false;

		propositionCategoryModelImpl._originalCategoryTypeId = propositionCategoryModelImpl._categoryTypeId;

		propositionCategoryModelImpl._setOriginalCategoryTypeId = false;

		propositionCategoryModelImpl._originalParentId = propositionCategoryModelImpl._parentId;

		propositionCategoryModelImpl._setOriginalParentId = false;

		propositionCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PropositionCategory> toCacheModel() {
		PropositionCategoryCacheModel propositionCategoryCacheModel = new PropositionCategoryCacheModel();

		propositionCategoryCacheModel.categoryId = getCategoryId();

		propositionCategoryCacheModel.companyId = getCompanyId();

		propositionCategoryCacheModel.groupId = getGroupId();

		propositionCategoryCacheModel.userId = getUserId();

		propositionCategoryCacheModel.categoryTypeId = getCategoryTypeId();

		propositionCategoryCacheModel.parentId = getParentId();

		propositionCategoryCacheModel.categoryName = getCategoryName();

		String categoryName = propositionCategoryCacheModel.categoryName;

		if ((categoryName != null) && (categoryName.length() == 0)) {
			propositionCategoryCacheModel.categoryName = null;
		}

		propositionCategoryCacheModel.categoryDesc = getCategoryDesc();

		String categoryDesc = propositionCategoryCacheModel.categoryDesc;

		if ((categoryDesc != null) && (categoryDesc.length() == 0)) {
			propositionCategoryCacheModel.categoryDesc = null;
		}

		propositionCategoryCacheModel.propositionCount = getPropositionCount();

		Date createDate = getCreateDate();

		if (createDate != null) {
			propositionCategoryCacheModel.createDate = createDate.getTime();
		}
		else {
			propositionCategoryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			propositionCategoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			propositionCategoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return propositionCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{categoryId=");
		sb.append(getCategoryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", categoryTypeId=");
		sb.append(getCategoryTypeId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", categoryName=");
		sb.append(getCategoryName());
		sb.append(", categoryDesc=");
		sb.append(getCategoryDesc());
		sb.append(", propositionCount=");
		sb.append(getPropositionCount());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append(
			"com.portal_egov.portlet.proposition_feedback.model.PropositionCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryTypeId</column-name><column-value><![CDATA[");
		sb.append(getCategoryTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryName</column-name><column-value><![CDATA[");
		sb.append(getCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryDesc</column-name><column-value><![CDATA[");
		sb.append(getCategoryDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propositionCount</column-name><column-value><![CDATA[");
		sb.append(getPropositionCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PropositionCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			PropositionCategory.class
		};
	private long _categoryId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private int _categoryTypeId;
	private int _originalCategoryTypeId;
	private boolean _setOriginalCategoryTypeId;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private String _categoryName;
	private String _categoryDesc;
	private int _propositionCount;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private PropositionCategory _escapedModelProxy;
}