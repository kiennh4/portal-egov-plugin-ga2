/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.proposition_feedback.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.proposition_feedback.model.Proposition;
import com.portal_egov.portlet.proposition_feedback.model.PropositionModel;
import com.portal_egov.portlet.proposition_feedback.model.PropositionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Proposition service. Represents a row in the &quot;Proposition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.proposition_feedback.model.PropositionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PropositionImpl}.
 * </p>
 *
 * @author HungDX
 * @see PropositionImpl
 * @see com.portal_egov.portlet.proposition_feedback.model.Proposition
 * @see com.portal_egov.portlet.proposition_feedback.model.PropositionModel
 * @generated
 */
@JSON(strict = true)
public class PropositionModelImpl extends BaseModelImpl<Proposition>
	implements PropositionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a proposition model instance should use the {@link com.portal_egov.portlet.proposition_feedback.model.Proposition} interface instead.
	 */
	public static final String TABLE_NAME = "Proposition";
	public static final Object[][] TABLE_COLUMNS = {
			{ "propositionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "categoryId", Types.BIGINT },
			{ "compilationDepartmentId", Types.BIGINT },
			{ "verificationDepartmentId", Types.BIGINT },
			{ "propositionName", Types.VARCHAR },
			{ "propositionDesc", Types.VARCHAR },
			{ "propositionContent", Types.CLOB },
			{ "documentFileId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "viewCount", Types.INTEGER },
			{ "feedbackCount", Types.INTEGER },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Proposition (propositionId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,categoryId LONG,compilationDepartmentId LONG,verificationDepartmentId LONG,propositionName VARCHAR(2000) null,propositionDesc STRING null,propositionContent TEXT null,documentFileId LONG,createDate DATE null,modifiedDate DATE null,viewCount INTEGER,feedbackCount INTEGER,status INTEGER,statusByUserId LONG,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Proposition";
	public static final String ORDER_BY_JPQL = " ORDER BY proposition.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Proposition.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.proposition_feedback.model.Proposition"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.proposition_feedback.model.Proposition"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.proposition_feedback.model.Proposition"),
			true);
	public static long CATEGORYID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Proposition toModel(PropositionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Proposition model = new PropositionImpl();

		model.setPropositionId(soapModel.getPropositionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCategoryId(soapModel.getCategoryId());
		model.setCompilationDepartmentId(soapModel.getCompilationDepartmentId());
		model.setVerificationDepartmentId(soapModel.getVerificationDepartmentId());
		model.setPropositionName(soapModel.getPropositionName());
		model.setPropositionDesc(soapModel.getPropositionDesc());
		model.setPropositionContent(soapModel.getPropositionContent());
		model.setDocumentFileId(soapModel.getDocumentFileId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setViewCount(soapModel.getViewCount());
		model.setFeedbackCount(soapModel.getFeedbackCount());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Proposition> toModels(PropositionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Proposition> models = new ArrayList<Proposition>(soapModels.length);

		for (PropositionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.proposition_feedback.model.Proposition"));

	public PropositionModelImpl() {
	}

	public long getPrimaryKey() {
		return _propositionId;
	}

	public void setPrimaryKey(long primaryKey) {
		setPropositionId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_propositionId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Proposition.class;
	}

	public String getModelClassName() {
		return Proposition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("propositionId", getPropositionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("categoryId", getCategoryId());
		attributes.put("compilationDepartmentId", getCompilationDepartmentId());
		attributes.put("verificationDepartmentId", getVerificationDepartmentId());
		attributes.put("propositionName", getPropositionName());
		attributes.put("propositionDesc", getPropositionDesc());
		attributes.put("propositionContent", getPropositionContent());
		attributes.put("documentFileId", getDocumentFileId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("viewCount", getViewCount());
		attributes.put("feedbackCount", getFeedbackCount());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusDate", getStatusDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long propositionId = (Long)attributes.get("propositionId");

		if (propositionId != null) {
			setPropositionId(propositionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Long compilationDepartmentId = (Long)attributes.get(
				"compilationDepartmentId");

		if (compilationDepartmentId != null) {
			setCompilationDepartmentId(compilationDepartmentId);
		}

		Long verificationDepartmentId = (Long)attributes.get(
				"verificationDepartmentId");

		if (verificationDepartmentId != null) {
			setVerificationDepartmentId(verificationDepartmentId);
		}

		String propositionName = (String)attributes.get("propositionName");

		if (propositionName != null) {
			setPropositionName(propositionName);
		}

		String propositionDesc = (String)attributes.get("propositionDesc");

		if (propositionDesc != null) {
			setPropositionDesc(propositionDesc);
		}

		String propositionContent = (String)attributes.get("propositionContent");

		if (propositionContent != null) {
			setPropositionContent(propositionContent);
		}

		Long documentFileId = (Long)attributes.get("documentFileId");

		if (documentFileId != null) {
			setDocumentFileId(documentFileId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer viewCount = (Integer)attributes.get("viewCount");

		if (viewCount != null) {
			setViewCount(viewCount);
		}

		Integer feedbackCount = (Integer)attributes.get("feedbackCount");

		if (feedbackCount != null) {
			setFeedbackCount(feedbackCount);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	public long getPropositionId() {
		return _propositionId;
	}

	public void setPropositionId(long propositionId) {
		_propositionId = propositionId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public long getCategoryId() {
		return _categoryId;
	}

	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@JSON
	public long getCompilationDepartmentId() {
		return _compilationDepartmentId;
	}

	public void setCompilationDepartmentId(long compilationDepartmentId) {
		_compilationDepartmentId = compilationDepartmentId;
	}

	@JSON
	public long getVerificationDepartmentId() {
		return _verificationDepartmentId;
	}

	public void setVerificationDepartmentId(long verificationDepartmentId) {
		_verificationDepartmentId = verificationDepartmentId;
	}

	@JSON
	public String getPropositionName() {
		if (_propositionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _propositionName;
		}
	}

	public void setPropositionName(String propositionName) {
		_propositionName = propositionName;
	}

	@JSON
	public String getPropositionDesc() {
		if (_propositionDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _propositionDesc;
		}
	}

	public void setPropositionDesc(String propositionDesc) {
		_propositionDesc = propositionDesc;
	}

	@JSON
	public String getPropositionContent() {
		if (_propositionContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _propositionContent;
		}
	}

	public void setPropositionContent(String propositionContent) {
		_propositionContent = propositionContent;
	}

	@JSON
	public long getDocumentFileId() {
		return _documentFileId;
	}

	public void setDocumentFileId(long documentFileId) {
		_documentFileId = documentFileId;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public int getViewCount() {
		return _viewCount;
	}

	public void setViewCount(int viewCount) {
		_viewCount = viewCount;
	}

	@JSON
	public int getFeedbackCount() {
		return _feedbackCount;
	}

	public void setFeedbackCount(int feedbackCount) {
		_feedbackCount = feedbackCount;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Proposition.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Proposition toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Proposition)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PropositionImpl propositionImpl = new PropositionImpl();

		propositionImpl.setPropositionId(getPropositionId());
		propositionImpl.setCompanyId(getCompanyId());
		propositionImpl.setGroupId(getGroupId());
		propositionImpl.setUserId(getUserId());
		propositionImpl.setUserName(getUserName());
		propositionImpl.setCategoryId(getCategoryId());
		propositionImpl.setCompilationDepartmentId(getCompilationDepartmentId());
		propositionImpl.setVerificationDepartmentId(getVerificationDepartmentId());
		propositionImpl.setPropositionName(getPropositionName());
		propositionImpl.setPropositionDesc(getPropositionDesc());
		propositionImpl.setPropositionContent(getPropositionContent());
		propositionImpl.setDocumentFileId(getDocumentFileId());
		propositionImpl.setCreateDate(getCreateDate());
		propositionImpl.setModifiedDate(getModifiedDate());
		propositionImpl.setViewCount(getViewCount());
		propositionImpl.setFeedbackCount(getFeedbackCount());
		propositionImpl.setStatus(getStatus());
		propositionImpl.setStatusByUserId(getStatusByUserId());
		propositionImpl.setStatusDate(getStatusDate());

		propositionImpl.resetOriginalValues();

		return propositionImpl;
	}

	public int compareTo(Proposition proposition) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), proposition.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Proposition proposition = null;

		try {
			proposition = (Proposition)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = proposition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PropositionModelImpl propositionModelImpl = this;

		propositionModelImpl._originalCompanyId = propositionModelImpl._companyId;

		propositionModelImpl._setOriginalCompanyId = false;

		propositionModelImpl._originalGroupId = propositionModelImpl._groupId;

		propositionModelImpl._setOriginalGroupId = false;

		propositionModelImpl._originalCategoryId = propositionModelImpl._categoryId;

		propositionModelImpl._setOriginalCategoryId = false;

		propositionModelImpl._originalStatus = propositionModelImpl._status;

		propositionModelImpl._setOriginalStatus = false;

		propositionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Proposition> toCacheModel() {
		PropositionCacheModel propositionCacheModel = new PropositionCacheModel();

		propositionCacheModel.propositionId = getPropositionId();

		propositionCacheModel.companyId = getCompanyId();

		propositionCacheModel.groupId = getGroupId();

		propositionCacheModel.userId = getUserId();

		propositionCacheModel.userName = getUserName();

		String userName = propositionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			propositionCacheModel.userName = null;
		}

		propositionCacheModel.categoryId = getCategoryId();

		propositionCacheModel.compilationDepartmentId = getCompilationDepartmentId();

		propositionCacheModel.verificationDepartmentId = getVerificationDepartmentId();

		propositionCacheModel.propositionName = getPropositionName();

		String propositionName = propositionCacheModel.propositionName;

		if ((propositionName != null) && (propositionName.length() == 0)) {
			propositionCacheModel.propositionName = null;
		}

		propositionCacheModel.propositionDesc = getPropositionDesc();

		String propositionDesc = propositionCacheModel.propositionDesc;

		if ((propositionDesc != null) && (propositionDesc.length() == 0)) {
			propositionCacheModel.propositionDesc = null;
		}

		propositionCacheModel.propositionContent = getPropositionContent();

		String propositionContent = propositionCacheModel.propositionContent;

		if ((propositionContent != null) && (propositionContent.length() == 0)) {
			propositionCacheModel.propositionContent = null;
		}

		propositionCacheModel.documentFileId = getDocumentFileId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			propositionCacheModel.createDate = createDate.getTime();
		}
		else {
			propositionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			propositionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			propositionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		propositionCacheModel.viewCount = getViewCount();

		propositionCacheModel.feedbackCount = getFeedbackCount();

		propositionCacheModel.status = getStatus();

		propositionCacheModel.statusByUserId = getStatusByUserId();

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			propositionCacheModel.statusDate = statusDate.getTime();
		}
		else {
			propositionCacheModel.statusDate = Long.MIN_VALUE;
		}

		return propositionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{propositionId=");
		sb.append(getPropositionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", compilationDepartmentId=");
		sb.append(getCompilationDepartmentId());
		sb.append(", verificationDepartmentId=");
		sb.append(getVerificationDepartmentId());
		sb.append(", propositionName=");
		sb.append(getPropositionName());
		sb.append(", propositionDesc=");
		sb.append(getPropositionDesc());
		sb.append(", propositionContent=");
		sb.append(getPropositionContent());
		sb.append(", documentFileId=");
		sb.append(getDocumentFileId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", viewCount=");
		sb.append(getViewCount());
		sb.append(", feedbackCount=");
		sb.append(getFeedbackCount());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append(
			"com.portal_egov.portlet.proposition_feedback.model.Proposition");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>propositionId</column-name><column-value><![CDATA[");
		sb.append(getPropositionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compilationDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getCompilationDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verificationDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getVerificationDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propositionName</column-name><column-value><![CDATA[");
		sb.append(getPropositionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propositionDesc</column-name><column-value><![CDATA[");
		sb.append(getPropositionDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propositionContent</column-name><column-value><![CDATA[");
		sb.append(getPropositionContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentFileId</column-name><column-value><![CDATA[");
		sb.append(getDocumentFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewCount</column-name><column-value><![CDATA[");
		sb.append(getViewCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackCount</column-name><column-value><![CDATA[");
		sb.append(getFeedbackCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Proposition.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Proposition.class
		};
	private long _propositionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private long _compilationDepartmentId;
	private long _verificationDepartmentId;
	private String _propositionName;
	private String _propositionDesc;
	private String _propositionContent;
	private long _documentFileId;
	private Date _createDate;
	private Date _modifiedDate;
	private int _viewCount;
	private int _feedbackCount;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private Date _statusDate;
	private long _columnBitmask;
	private Proposition _escapedModelProxy;
}