/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portal_egov.portlet.proposition_feedback.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.portal_egov.portlet.proposition_feedback.model.PropositionFeedback;
import com.portal_egov.portlet.proposition_feedback.model.PropositionFeedbackModel;
import com.portal_egov.portlet.proposition_feedback.model.PropositionFeedbackSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PropositionFeedback service. Represents a row in the &quot;PropositionFeedback&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portal_egov.portlet.proposition_feedback.model.PropositionFeedbackModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PropositionFeedbackImpl}.
 * </p>
 *
 * @author HungDX
 * @see PropositionFeedbackImpl
 * @see com.portal_egov.portlet.proposition_feedback.model.PropositionFeedback
 * @see com.portal_egov.portlet.proposition_feedback.model.PropositionFeedbackModel
 * @generated
 */
@JSON(strict = true)
public class PropositionFeedbackModelImpl extends BaseModelImpl<PropositionFeedback>
	implements PropositionFeedbackModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a proposition feedback model instance should use the {@link com.portal_egov.portlet.proposition_feedback.model.PropositionFeedback} interface instead.
	 */
	public static final String TABLE_NAME = "PropositionFeedback";
	public static final Object[][] TABLE_COLUMNS = {
			{ "feedbackId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "propositionId", Types.BIGINT },
			{ "feedbackFileAttId", Types.BIGINT },
			{ "feedbackTitle", Types.VARCHAR },
			{ "feedbackContent", Types.CLOB },
			{ "citizenName", Types.VARCHAR },
			{ "citizenEmail", Types.VARCHAR },
			{ "citizenPhone", Types.VARCHAR },
			{ "citizenAddress", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table PropositionFeedback (feedbackId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,propositionId LONG,feedbackFileAttId LONG,feedbackTitle STRING null,feedbackContent TEXT null,citizenName VARCHAR(300) null,citizenEmail VARCHAR(150) null,citizenPhone VARCHAR(75) null,citizenAddress VARCHAR(1000) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table PropositionFeedback";
	public static final String ORDER_BY_JPQL = " ORDER BY propositionFeedback.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY PropositionFeedback.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portal_egov.portlet.proposition_feedback.model.PropositionFeedback"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portal_egov.portlet.proposition_feedback.model.PropositionFeedback"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.portal_egov.portlet.proposition_feedback.model.PropositionFeedback"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long PROPOSITIONID_COLUMN_BITMASK = 4L;
	public static long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PropositionFeedback toModel(PropositionFeedbackSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PropositionFeedback model = new PropositionFeedbackImpl();

		model.setFeedbackId(soapModel.getFeedbackId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setPropositionId(soapModel.getPropositionId());
		model.setFeedbackFileAttId(soapModel.getFeedbackFileAttId());
		model.setFeedbackTitle(soapModel.getFeedbackTitle());
		model.setFeedbackContent(soapModel.getFeedbackContent());
		model.setCitizenName(soapModel.getCitizenName());
		model.setCitizenEmail(soapModel.getCitizenEmail());
		model.setCitizenPhone(soapModel.getCitizenPhone());
		model.setCitizenAddress(soapModel.getCitizenAddress());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PropositionFeedback> toModels(
		PropositionFeedbackSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PropositionFeedback> models = new ArrayList<PropositionFeedback>(soapModels.length);

		for (PropositionFeedbackSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portal_egov.portlet.proposition_feedback.model.PropositionFeedback"));

	public PropositionFeedbackModelImpl() {
	}

	public long getPrimaryKey() {
		return _feedbackId;
	}

	public void setPrimaryKey(long primaryKey) {
		setFeedbackId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_feedbackId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return PropositionFeedback.class;
	}

	public String getModelClassName() {
		return PropositionFeedback.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("feedbackId", getFeedbackId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("propositionId", getPropositionId());
		attributes.put("feedbackFileAttId", getFeedbackFileAttId());
		attributes.put("feedbackTitle", getFeedbackTitle());
		attributes.put("feedbackContent", getFeedbackContent());
		attributes.put("citizenName", getCitizenName());
		attributes.put("citizenEmail", getCitizenEmail());
		attributes.put("citizenPhone", getCitizenPhone());
		attributes.put("citizenAddress", getCitizenAddress());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusDate", getStatusDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long feedbackId = (Long)attributes.get("feedbackId");

		if (feedbackId != null) {
			setFeedbackId(feedbackId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long propositionId = (Long)attributes.get("propositionId");

		if (propositionId != null) {
			setPropositionId(propositionId);
		}

		Long feedbackFileAttId = (Long)attributes.get("feedbackFileAttId");

		if (feedbackFileAttId != null) {
			setFeedbackFileAttId(feedbackFileAttId);
		}

		String feedbackTitle = (String)attributes.get("feedbackTitle");

		if (feedbackTitle != null) {
			setFeedbackTitle(feedbackTitle);
		}

		String feedbackContent = (String)attributes.get("feedbackContent");

		if (feedbackContent != null) {
			setFeedbackContent(feedbackContent);
		}

		String citizenName = (String)attributes.get("citizenName");

		if (citizenName != null) {
			setCitizenName(citizenName);
		}

		String citizenEmail = (String)attributes.get("citizenEmail");

		if (citizenEmail != null) {
			setCitizenEmail(citizenEmail);
		}

		String citizenPhone = (String)attributes.get("citizenPhone");

		if (citizenPhone != null) {
			setCitizenPhone(citizenPhone);
		}

		String citizenAddress = (String)attributes.get("citizenAddress");

		if (citizenAddress != null) {
			setCitizenAddress(citizenAddress);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	public long getFeedbackId() {
		return _feedbackId;
	}

	public void setFeedbackId(long feedbackId) {
		_feedbackId = feedbackId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public long getPropositionId() {
		return _propositionId;
	}

	public void setPropositionId(long propositionId) {
		_columnBitmask |= PROPOSITIONID_COLUMN_BITMASK;

		if (!_setOriginalPropositionId) {
			_setOriginalPropositionId = true;

			_originalPropositionId = _propositionId;
		}

		_propositionId = propositionId;
	}

	public long getOriginalPropositionId() {
		return _originalPropositionId;
	}

	@JSON
	public long getFeedbackFileAttId() {
		return _feedbackFileAttId;
	}

	public void setFeedbackFileAttId(long feedbackFileAttId) {
		_feedbackFileAttId = feedbackFileAttId;
	}

	@JSON
	public String getFeedbackTitle() {
		if (_feedbackTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _feedbackTitle;
		}
	}

	public void setFeedbackTitle(String feedbackTitle) {
		_feedbackTitle = feedbackTitle;
	}

	@JSON
	public String getFeedbackContent() {
		if (_feedbackContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _feedbackContent;
		}
	}

	public void setFeedbackContent(String feedbackContent) {
		_feedbackContent = feedbackContent;
	}

	@JSON
	public String getCitizenName() {
		if (_citizenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _citizenName;
		}
	}

	public void setCitizenName(String citizenName) {
		_citizenName = citizenName;
	}

	@JSON
	public String getCitizenEmail() {
		if (_citizenEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _citizenEmail;
		}
	}

	public void setCitizenEmail(String citizenEmail) {
		_citizenEmail = citizenEmail;
	}

	@JSON
	public String getCitizenPhone() {
		if (_citizenPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _citizenPhone;
		}
	}

	public void setCitizenPhone(String citizenPhone) {
		_citizenPhone = citizenPhone;
	}

	@JSON
	public String getCitizenAddress() {
		if (_citizenAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _citizenAddress;
		}
	}

	public void setCitizenAddress(String citizenAddress) {
		_citizenAddress = citizenAddress;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PropositionFeedback.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PropositionFeedback toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (PropositionFeedback)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PropositionFeedbackImpl propositionFeedbackImpl = new PropositionFeedbackImpl();

		propositionFeedbackImpl.setFeedbackId(getFeedbackId());
		propositionFeedbackImpl.setCompanyId(getCompanyId());
		propositionFeedbackImpl.setGroupId(getGroupId());
		propositionFeedbackImpl.setUserId(getUserId());
		propositionFeedbackImpl.setPropositionId(getPropositionId());
		propositionFeedbackImpl.setFeedbackFileAttId(getFeedbackFileAttId());
		propositionFeedbackImpl.setFeedbackTitle(getFeedbackTitle());
		propositionFeedbackImpl.setFeedbackContent(getFeedbackContent());
		propositionFeedbackImpl.setCitizenName(getCitizenName());
		propositionFeedbackImpl.setCitizenEmail(getCitizenEmail());
		propositionFeedbackImpl.setCitizenPhone(getCitizenPhone());
		propositionFeedbackImpl.setCitizenAddress(getCitizenAddress());
		propositionFeedbackImpl.setCreateDate(getCreateDate());
		propositionFeedbackImpl.setModifiedDate(getModifiedDate());
		propositionFeedbackImpl.setStatus(getStatus());
		propositionFeedbackImpl.setStatusByUserId(getStatusByUserId());
		propositionFeedbackImpl.setStatusDate(getStatusDate());

		propositionFeedbackImpl.resetOriginalValues();

		return propositionFeedbackImpl;
	}

	public int compareTo(PropositionFeedback propositionFeedback) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				propositionFeedback.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		PropositionFeedback propositionFeedback = null;

		try {
			propositionFeedback = (PropositionFeedback)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = propositionFeedback.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PropositionFeedbackModelImpl propositionFeedbackModelImpl = this;

		propositionFeedbackModelImpl._originalCompanyId = propositionFeedbackModelImpl._companyId;

		propositionFeedbackModelImpl._setOriginalCompanyId = false;

		propositionFeedbackModelImpl._originalGroupId = propositionFeedbackModelImpl._groupId;

		propositionFeedbackModelImpl._setOriginalGroupId = false;

		propositionFeedbackModelImpl._originalPropositionId = propositionFeedbackModelImpl._propositionId;

		propositionFeedbackModelImpl._setOriginalPropositionId = false;

		propositionFeedbackModelImpl._originalStatus = propositionFeedbackModelImpl._status;

		propositionFeedbackModelImpl._setOriginalStatus = false;

		propositionFeedbackModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PropositionFeedback> toCacheModel() {
		PropositionFeedbackCacheModel propositionFeedbackCacheModel = new PropositionFeedbackCacheModel();

		propositionFeedbackCacheModel.feedbackId = getFeedbackId();

		propositionFeedbackCacheModel.companyId = getCompanyId();

		propositionFeedbackCacheModel.groupId = getGroupId();

		propositionFeedbackCacheModel.userId = getUserId();

		propositionFeedbackCacheModel.propositionId = getPropositionId();

		propositionFeedbackCacheModel.feedbackFileAttId = getFeedbackFileAttId();

		propositionFeedbackCacheModel.feedbackTitle = getFeedbackTitle();

		String feedbackTitle = propositionFeedbackCacheModel.feedbackTitle;

		if ((feedbackTitle != null) && (feedbackTitle.length() == 0)) {
			propositionFeedbackCacheModel.feedbackTitle = null;
		}

		propositionFeedbackCacheModel.feedbackContent = getFeedbackContent();

		String feedbackContent = propositionFeedbackCacheModel.feedbackContent;

		if ((feedbackContent != null) && (feedbackContent.length() == 0)) {
			propositionFeedbackCacheModel.feedbackContent = null;
		}

		propositionFeedbackCacheModel.citizenName = getCitizenName();

		String citizenName = propositionFeedbackCacheModel.citizenName;

		if ((citizenName != null) && (citizenName.length() == 0)) {
			propositionFeedbackCacheModel.citizenName = null;
		}

		propositionFeedbackCacheModel.citizenEmail = getCitizenEmail();

		String citizenEmail = propositionFeedbackCacheModel.citizenEmail;

		if ((citizenEmail != null) && (citizenEmail.length() == 0)) {
			propositionFeedbackCacheModel.citizenEmail = null;
		}

		propositionFeedbackCacheModel.citizenPhone = getCitizenPhone();

		String citizenPhone = propositionFeedbackCacheModel.citizenPhone;

		if ((citizenPhone != null) && (citizenPhone.length() == 0)) {
			propositionFeedbackCacheModel.citizenPhone = null;
		}

		propositionFeedbackCacheModel.citizenAddress = getCitizenAddress();

		String citizenAddress = propositionFeedbackCacheModel.citizenAddress;

		if ((citizenAddress != null) && (citizenAddress.length() == 0)) {
			propositionFeedbackCacheModel.citizenAddress = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			propositionFeedbackCacheModel.createDate = createDate.getTime();
		}
		else {
			propositionFeedbackCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			propositionFeedbackCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			propositionFeedbackCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		propositionFeedbackCacheModel.status = getStatus();

		propositionFeedbackCacheModel.statusByUserId = getStatusByUserId();

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			propositionFeedbackCacheModel.statusDate = statusDate.getTime();
		}
		else {
			propositionFeedbackCacheModel.statusDate = Long.MIN_VALUE;
		}

		return propositionFeedbackCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{feedbackId=");
		sb.append(getFeedbackId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", propositionId=");
		sb.append(getPropositionId());
		sb.append(", feedbackFileAttId=");
		sb.append(getFeedbackFileAttId());
		sb.append(", feedbackTitle=");
		sb.append(getFeedbackTitle());
		sb.append(", feedbackContent=");
		sb.append(getFeedbackContent());
		sb.append(", citizenName=");
		sb.append(getCitizenName());
		sb.append(", citizenEmail=");
		sb.append(getCitizenEmail());
		sb.append(", citizenPhone=");
		sb.append(getCitizenPhone());
		sb.append(", citizenAddress=");
		sb.append(getCitizenAddress());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append(
			"com.portal_egov.portlet.proposition_feedback.model.PropositionFeedback");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>feedbackId</column-name><column-value><![CDATA[");
		sb.append(getFeedbackId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propositionId</column-name><column-value><![CDATA[");
		sb.append(getPropositionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackFileAttId</column-name><column-value><![CDATA[");
		sb.append(getFeedbackFileAttId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackTitle</column-name><column-value><![CDATA[");
		sb.append(getFeedbackTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackContent</column-name><column-value><![CDATA[");
		sb.append(getFeedbackContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>citizenName</column-name><column-value><![CDATA[");
		sb.append(getCitizenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>citizenEmail</column-name><column-value><![CDATA[");
		sb.append(getCitizenEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>citizenPhone</column-name><column-value><![CDATA[");
		sb.append(getCitizenPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>citizenAddress</column-name><column-value><![CDATA[");
		sb.append(getCitizenAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PropositionFeedback.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			PropositionFeedback.class
		};
	private long _feedbackId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _propositionId;
	private long _originalPropositionId;
	private boolean _setOriginalPropositionId;
	private long _feedbackFileAttId;
	private String _feedbackTitle;
	private String _feedbackContent;
	private String _citizenName;
	private String _citizenEmail;
	private String _citizenPhone;
	private String _citizenAddress;
	private Date _createDate;
	private Date _modifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private Date _statusDate;
	private long _columnBitmask;
	private PropositionFeedback _escapedModelProxy;
}